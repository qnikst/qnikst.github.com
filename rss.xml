<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Qnikst blog RSS feed - All posts</title>
    <link href="https://qnikst.github.io/rss.xml" rel="self" />
    <link href="https://qnikst.github.io" />
    <id>https://qnikst.github.io/rss.xml</id>
    <author>
        <name>Alexander Vershilov</name>
        <email>alexander.vershilov@gmail.com</email>
    </author>
    <updated>2018-08-22T00:00:00Z</updated>
    <entry>
    <title>Marrying Haskell and Hyper-Threading</title>
    <link href="https://qnikst.github.io/posts/2018-08-23-ht-no-more.html" />
    <id>https://qnikst.github.io/posts/2018-08-23-ht-no-more.html</id>
    <published>2018-08-22T00:00:00Z</published>
    <updated>2018-08-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>In this blog post, I’d like to tell one story that had happened with one Haskell application. Then explain how we can start threaded RTS, so it is aware of the CPU layout on your system. If you want to skip the story, you can proceed to the solution directly.</p>
<p>Recently I’ve written a small Haskell application that performs some cryptography routines, query management, and communication with Redis. We wanted to test the capabilities of the application and RPS that application can support. We used Yandex Tank for this purpose. <a href="https://yandextank.readthedocs.io/en/latest/index.html">Yandex tank</a> can generate a load on the site and build <a href="https://overload.yandex.net/1">fantastic reports</a> (may require GitHub authorization).</p>
<p>Results were quite interesting. At first, everything went well, and the application was able to process about <code>1k</code> requests per second, and that was enough for the expected load. However, when Yandex Tank gave a pressure about <code>2k</code> RPS, the situation became worse. Application stopped being responsive. The application was able to process only <code>200</code> requests per second. That was troublesome. On the Yandex tank plots there was a period of reasonable performance, and then a period of unresponsiveness.</p>
<img src="../images/posts/ht-no-more/1.plot.jpg" alt="Spikes on the tank terminal report" />
<div>
<img src="../images/posts/ht-no-more/2.tank.report.png" width="399" style="inline"/><img src=" ../images/posts/ht-no-more/3.tank.report.png" width="399" style="inline"/>
</div>
<p>As it happens the first suspect in such cases is the Garbage Collector. You can always hear lots of scary stories about how GC could ruin your life. Keeping that in mind GC was tunned beforehand, and I prepared some metrics. However, this time situation was quite OK, garbage collector pauses were all &lt;10ms, and 99% of the total time program spent on actual work and not garbage collection. Memory usage was too big ~700Mb, and I didn’t expect that.</p>
<figure>
<img src="../images/posts/ht-no-more/4.gc-info.jpg" alt="GC Information" /><figcaption>GC Information</figcaption>
</figure>
<p>On the left plot you can see reports of the last GC, they are not very precise as they may miss some GCs or report the same GC twice. However they still tell us the order of magnutude. On the right plot we see ratio of time spent in mutator to the total running time.</p>
<p>Other parts of the system were not under stress and were capable of the handling higher load. So the issue was with my program. Although I didn’t spend much time optimising the program, it should behave better.</p>
<p>Another surprising fact was that the issue didn’t appear on my system that is comparable to the one where stress tests were running, and that could handle higher load. Accidentally I realised the difference, and the following dialogue took place:</p>
<blockquote>
<p>Me: What is the CPU on the system?</p>
<p>Admin: I7 4 cores, eight thread!</p>
<p>Me: Ah! Add <code>GHCRTS=-N4</code> to the container’s Environment.</p>
</blockquote>
<p>After that single change situation drastically changed, the program was able to process 4.5k RPS (comparable to the maximum load that a single instance of Yandex.Tank can generate), now mutator time got &gt;99%, GC pauses were still ~10ms but very rare, and memory usage was about 25Mb.</p>
<img src="../images/posts/ht-no-more/4.gc-info.jpg" alt="GC Information" />
<div>
<img src="../images/posts/ht-no-more/5.tank.report.png" width="399" style="inline"/><img src=" ../images/posts/ht-no-more/6.tank.report.png" width="399" style="inline"/>
</div>
<p>Connect time is still terrible here, but it was fixed by reconfiguring and improving network, and is out of the scope.</p>
<p>So this is just another story about suboptimal defaults for the runtime system. It happens that if you pass <code>+RTS -N</code> option - you tell runtime system to start the same number of capabilities as you have cores. However, <code>RTS</code> makes no difference between real and virtual cores. It appears that <code>RTS</code> could not make enough benefit from the virtual cores, and performance is not good enough in that case.</p>
<p>While it is pretty impressive, that we can optimise the program without any changes in source code, it’s interesting, what can we do in the general case. It’s problematic that we can not set good options that work on any CPU and have decent performance. To find an answer, I’ve started the project <a href="https://github.com/qnikst/haskell-fun/tree/master/ht-no-more">ht-no-more</a>. It lives in my playground for now, but I can extract it to the separate repo. I hope that at some point it will be mature enough to be used as a library or even land to the RTS.</p>
<h2 id="solution">Solution <a name="solution"></a></h2>
<p>The idea is to gather information about the architecture during the program startup and then set up the RTS with proper configuration. We want:</p>
<ol type="1">
<li>collect information about the CPU (how many real and how many virtual cores do we have);</li>
<li>do not allow RTS to run work on the virtual cores;</li>
<li>make it so <code>+RTS -N</code> option still behaves well.</li>
</ol>
<p><em>N.B. From this place and now on we assume that we run on <code>Linux</code> only and that we have <code>procfs</code> mounted and that we can write non-portable code. Now our life is comfortable, and we can proceed with the task.</em></p>
<p>The first question is how can we tie our process to the <code>CPU</code>. There are <a href="https://linux.die.net/man/2/sched_setaffinity">sched_getaffinity()</a> and <a href="https://linux.die.net/man/2/sched_setaffinity">sched_setaffinity()</a> calls. Those methods perform hard wiring of the process and all it’s descendent processes to the given CPUs. So we can use them to mask CPU that we are not interested in.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="dt">int</span> sched_setaffinity(pid_t pid, <span class="dt">size_t</span> cpusetsize,</a>
<a class="sourceLine" id="cb1-2" data-line-number="2">                      cpu_set_t *mask);</a>
<a class="sourceLine" id="cb1-3" data-line-number="3"></a>
<a class="sourceLine" id="cb1-4" data-line-number="4"><span class="dt">int</span> sched_getaffinity(pid_t pid, <span class="dt">size_t</span> cpusetsize,</a>
<a class="sourceLine" id="cb1-5" data-line-number="5">                      cpu_set_t *mask);</a></code></pre></div>
<p>First, we let’s write a simple <code>c</code> program that explains the API.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="pp">#define _GNU_SOURCE          </span><span class="co">// allow to use non-portable functions</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="pp">#include </span><span class="im">&lt;sched.h&gt;</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="pp">#include </span><span class="im">&lt;string.h&gt;</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="pp">#include </span><span class="im">&lt;stdlib.h&gt;</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6"></a>
<a class="sourceLine" id="cb2-7" data-line-number="7"><span class="dt">int</span> main(<span class="dt">int</span> argc, <span class="dt">char</span> * argv[]) {</a>
<a class="sourceLine" id="cb2-8" data-line-number="8">  cpu_set_t set;            <span class="co">// define CPU set</span></a>
<a class="sourceLine" id="cb2-9" data-line-number="9">  CPU_ZERO(&amp;set);           <span class="co">// mark all CPUs as unused</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10">  CPU_SET(<span class="dv">0</span>, &amp;set);         <span class="co">// allow to use first CPU</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11">  sched_setaffinity(<span class="dv">0</span>, <span class="kw">sizeof</span>(cpu_set_t), &amp;set); <span class="co">// wire process to CPU</span></a>
<a class="sourceLine" id="cb2-12" data-line-number="12">  <span class="dt">int</span> result = system(<span class="st">&quot;bash&quot;</span>); <span class="co">// start bash.</span></a>
<a class="sourceLine" id="cb2-13" data-line-number="13">  <span class="cf">return</span> result;</a>
<a class="sourceLine" id="cb2-14" data-line-number="14">}</a></code></pre></div>
<p>In this first program, we allow an application to run only on the first CPU. We need this program later for testing purposes. I’ve used it to check if my program behaves well in the constrained case.</p>
<p>The next question is how to check if a processor is real or virtual. The only way I’ve found it is to parse <code>/proc/cpuinfo</code> file. We are interested in <code>core id</code> entry for each processor, it tells what the index of the real core that CPU is set on is. For example on my machine I have:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="fu">grep</span> <span class="st">&#39;core id&#39;</span> /proc/cpuinfo </a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="ex">core</span> id        : 0</a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="ex">core</span> id        : 1</a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="ex">core</span> id        : 2</a>
<a class="sourceLine" id="cb3-5" data-line-number="5"><span class="ex">core</span> id        : 3</a></code></pre></div>
<p>As I have Hyper-Threading disabled - all cores are real ones. On digital ocean host, I have:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="fu">grep</span> <span class="st">&#39;core id&#39;</span> /proc/cpuinfo </a>
<a class="sourceLine" id="cb4-2" data-line-number="2"><span class="ex">core</span> id        : 0</a>
<a class="sourceLine" id="cb4-3" data-line-number="3"><span class="ex">core</span> id        : 0</a>
<a class="sourceLine" id="cb4-4" data-line-number="4"><span class="ex">core</span> id        : 0</a>
<a class="sourceLine" id="cb4-5" data-line-number="5"><span class="ex">core</span> id        : 0</a></code></pre></div>
<p>all CPU are on the same core (at least for the container).</p>
<p>Now we can combine the answers to the questions and write the code. We need to remember that there is an additional case that we want to cover: if the CPU was already disabled for our program – then we don’t want to “unmask” it. As a result, I ended up with the following code:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="dt">int</span> setcpus() {</a>
<a class="sourceLine" id="cb5-2" data-line-number="2">   cpu_set_t set;</a>
<a class="sourceLine" id="cb5-3" data-line-number="3">   <span class="dt">int</span> ret = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-4" data-line-number="4">   ret = sched_getaffinity(<span class="dv">0</span>, <span class="kw">sizeof</span>(cpu_set_t), &amp;set);</a>
<a class="sourceLine" id="cb5-5" data-line-number="5">   <span class="cf">if</span> (ret == <span class="dv">-1</span>) {</a>
<a class="sourceLine" id="cb5-6" data-line-number="6">     fprintf(stderr, <span class="st">&quot;Error: failed to get cpu affinity&quot;</span>);</a>
<a class="sourceLine" id="cb5-7" data-line-number="7">     <span class="cf">return</span> <span class="dv">0</span>; <span class="co">// We instruct code that we have failed and it should fallback to the normal procedure.</span></a>
<a class="sourceLine" id="cb5-8" data-line-number="8">   }</a>
<a class="sourceLine" id="cb5-9" data-line-number="9"></a>
<a class="sourceLine" id="cb5-10" data-line-number="10">   <span class="dt">int</span> current_cpu = <span class="dv">-1</span>;</a>
<a class="sourceLine" id="cb5-11" data-line-number="11">   <span class="dt">int</span> current_core = <span class="dv">-1</span>;</a>
<a class="sourceLine" id="cb5-12" data-line-number="12">   <span class="dt">FILE</span> *cpuinfo = fopen(<span class="st">&quot;/proc/cpuinfo&quot;</span>, <span class="st">&quot;rb&quot;</span>);</a>
<a class="sourceLine" id="cb5-13" data-line-number="13">   <span class="dt">char</span> *arg = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-14" data-line-number="14">   <span class="dt">size_t</span> size = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-15" data-line-number="15"></a>
<a class="sourceLine" id="cb5-16" data-line-number="16"></a>
<a class="sourceLine" id="cb5-17" data-line-number="17">   <span class="cf">while</span>(getdelim(&amp;arg, &amp;size, <span class="ch">&#39;\n&#39;</span>, cpuinfo) != <span class="dv">-1</span>)</a>
<a class="sourceLine" id="cb5-18" data-line-number="18">   {</a>
<a class="sourceLine" id="cb5-19" data-line-number="19">      <span class="cf">if</span> (strstr(arg, <span class="st">&quot;core id&quot;</span>) != NULL) {</a>
<a class="sourceLine" id="cb5-20" data-line-number="20">	current_core++;</a>
<a class="sourceLine" id="cb5-21" data-line-number="21">	<span class="dt">char</span> * found = strchr(arg, <span class="ch">&#39;:&#39;</span>);</a>
<a class="sourceLine" id="cb5-22" data-line-number="22">	<span class="cf">if</span> (found) {</a>
<a class="sourceLine" id="cb5-23" data-line-number="23">	   <span class="dt">int</span> cpu = atoi(found+<span class="dv">1</span>);</a>
<a class="sourceLine" id="cb5-24" data-line-number="24">	   <span class="cf">if</span> (current_cpu != cpu) {</a>
<a class="sourceLine" id="cb5-25" data-line-number="25">              current_cpu++;</a>
<a class="sourceLine" id="cb5-26" data-line-number="26">	      <span class="cf">if</span> (CPU_ISSET(current_core, &amp;set)) {</a>
<a class="sourceLine" id="cb5-27" data-line-number="27">	         CPU_SET(current_core, &amp;set);  <span class="co">// XXX: this is noop.</span></a>
<a class="sourceLine" id="cb5-28" data-line-number="28">	         fprintf(stderr, <span class="st">&quot;%i real core - enabling</span><span class="sc">\n</span><span class="st">&quot;</span>, current_core);</a>
<a class="sourceLine" id="cb5-29" data-line-number="29">	      } <span class="cf">else</span> {</a>
<a class="sourceLine" id="cb5-30" data-line-number="30">	         fprintf(stderr, <span class="st">&quot;%i was disabled - skipping</span><span class="sc">\n</span><span class="st">&quot;</span>, current_core);</a>
<a class="sourceLine" id="cb5-31" data-line-number="31">	      }</a>
<a class="sourceLine" id="cb5-32" data-line-number="32">           } <span class="cf">else</span> {</a>
<a class="sourceLine" id="cb5-33" data-line-number="33">              fprintf(stderr, <span class="st">&quot;%i is virual - skipping</span><span class="sc">\n</span><span class="st">&quot;</span>, current_core);</a>
<a class="sourceLine" id="cb5-34" data-line-number="34">	      CPU_CLR(current_core, &amp;set);</a>
<a class="sourceLine" id="cb5-35" data-line-number="35">           }</a>
<a class="sourceLine" id="cb5-36" data-line-number="36">        } <span class="cf">else</span> {</a>
<a class="sourceLine" id="cb5-37" data-line-number="37">	   <span class="cf">return</span> <span class="dv">1</span>;</a>
<a class="sourceLine" id="cb5-38" data-line-number="38">	}</a>
<a class="sourceLine" id="cb5-39" data-line-number="39">      }</a>
<a class="sourceLine" id="cb5-40" data-line-number="40">   }</a>
<a class="sourceLine" id="cb5-41" data-line-number="41">   ret = sched_setaffinity(<span class="dv">0</span>, <span class="kw">sizeof</span>(cpu_set_t), &amp;set);</a>
<a class="sourceLine" id="cb5-42" data-line-number="42">   <span class="cf">if</span> (ret == <span class="dv">-1</span>) {</a>
<a class="sourceLine" id="cb5-43" data-line-number="43">     fprintf(stderr, <span class="st">&quot;Error: failed to set affinities - falling back to default procedure</span><span class="sc">\n</span><span class="st">&quot;</span>);</a>
<a class="sourceLine" id="cb5-44" data-line-number="44">     procno = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-45" data-line-number="45">   } <span class="cf">else</span> {</a>
<a class="sourceLine" id="cb5-46" data-line-number="46">     procno = current_cpu;</a>
<a class="sourceLine" id="cb5-47" data-line-number="47">   }</a>
<a class="sourceLine" id="cb5-48" data-line-number="48">   free(arg);</a>
<a class="sourceLine" id="cb5-49" data-line-number="49">   fclose(cpuinfo);</a>
<a class="sourceLine" id="cb5-50" data-line-number="50">   <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb5-51" data-line-number="51">}</a></code></pre></div>
<p>Now we are ready to build a cabal project. I’m skipping all irrelevant things, that are generated by <code>cabal init</code></p>
<pre class="cabal"><code>executable ht-no-more
  main-is:             wrapper.c
  other-modules:       Entry 
  build-depends:       base &gt;=4.10 &amp;&amp; &lt;4.11
  default-language:    Haskell2010
  ghc-options:         -no-hs-main</code></pre>
<p>To highlight the important things: first of all, our main module is a <code>C</code> file. It does not work with old <code>cabal</code>’s that allowed only Haskell modules to be the main one. Then, we add <code>-no-hs-main</code> – an option that tells GHC not to create it’s own “main” and use the “main” function that we define. We define <code>Entry.hs</code> Haskell module that provides an entry function, because we no longer have one. In that module, we create a single function that tells how many capabilities RTS created.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="kw">module</span> <span class="dt">Entry</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2"></a>
<a class="sourceLine" id="cb7-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Control.Concurrent</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4"></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">foreign export ccall<span class="ot"> entry ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb7-6" data-line-number="6"></a>
<a class="sourceLine" id="cb7-7" data-line-number="7"><span class="ot">entry ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb7-8" data-line-number="8">entry <span class="fu">=</span> print <span class="fu">=&lt;&lt;</span> getNumCapabilities</a></code></pre></div>
<p>The only non-trivial thing we need is to export a foreign function, compiler generates a <code>C</code> complatible object called <code>entry</code> that we can call from <code>C</code>.</p>
<p>We follow <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/ffi-chap.html#using-your-own-main">GHC User’s Guide</a> to define our main function <em>(sidenote, if you haven’t read GHC User’s Guide, please do, it’s the most authoritative and precise source of information about GHC features and extensions)</em>.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="pp">#include </span><span class="im">&quot;HsFFI.h&quot;</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"></a>
<a class="sourceLine" id="cb8-3" data-line-number="3"><span class="pp">#ifdef __GLASGOW_HASKELL__</span></a>
<a class="sourceLine" id="cb8-4" data-line-number="4"><span class="pp">#include </span><span class="im">&quot;Entry_stub.h&quot;</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5"><span class="pp">#include </span><span class="im">&quot;Rts.h&quot;</span></a>
<a class="sourceLine" id="cb8-6" data-line-number="6"><span class="pp">#endif</span></a>
<a class="sourceLine" id="cb8-7" data-line-number="7"></a>
<a class="sourceLine" id="cb8-8" data-line-number="8"><span class="dt">int</span> main(<span class="dt">int</span> argc, <span class="dt">char</span> * argv[]) {</a>
<a class="sourceLine" id="cb8-9" data-line-number="9">  setcpus();</a>
<a class="sourceLine" id="cb8-10" data-line-number="10">  <span class="pp">#if __GLASGOW_HASKELL__ &gt;= 703</span></a>
<a class="sourceLine" id="cb8-11" data-line-number="11">  {</a>
<a class="sourceLine" id="cb8-12" data-line-number="12">     RtsConfig conf = defaultRtsConfig;</a>
<a class="sourceLine" id="cb8-13" data-line-number="13">     conf.rts_opts_enabled = RtsOptsAll;</a>
<a class="sourceLine" id="cb8-14" data-line-number="14">     hs_init_ghc(&amp;argc, &amp;argv, conf);</a>
<a class="sourceLine" id="cb8-15" data-line-number="15">  }</a>
<a class="sourceLine" id="cb8-16" data-line-number="16">  <span class="pp">#else</span></a>
<a class="sourceLine" id="cb8-17" data-line-number="17">     hs_init(&amp;argc, &amp;argv);</a>
<a class="sourceLine" id="cb8-18" data-line-number="18">  <span class="pp">#endif</span></a>
<a class="sourceLine" id="cb8-19" data-line-number="19">  hs_init(&amp;argc, &amp;argv);</a>
<a class="sourceLine" id="cb8-20" data-line-number="20">  entry();</a>
<a class="sourceLine" id="cb8-21" data-line-number="21">  hs_exit();</a>
<a class="sourceLine" id="cb8-22" data-line-number="22">  <span class="cf">return</span> <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb8-23" data-line-number="23">}</a></code></pre></div>
<p>However, we have not done everything. If you try to compile this program and run with <code>RTS +N</code> you’ll see expected logs, but the program report that you are using the number of capabilities equal to the number of virtual cores. It happens because with <code>RTS +N</code> GHC asks the number of configured processors and creates that number of capabilities. Instead, we want the count of capabilities to be equal to the number of real cores. Furthermore, we don’t want to patch GHC just yet because our code is too hacky.</p>
<p><code>GHC RTS</code> is linked statically with each Haskell project. It means that we can use a linker to make RTS use our method instead of the one provided with <code>GHC</code>, we are interested in redefining <code>uint32_t getNumberOfProcessors(void)</code>. For that reason, we use linker’s <a href="https://ftp.gnu.org/old-gnu/Manuals/ld-2.9.1/html_node/ld_3.html">wrap feature</a>. If you tell linker <code>-Wl,-wrap, function</code> then for each call to the <code>function</code> it calls <code>__wrap_function</code> instead and generates <code>__real_function</code> that you can call to call the original function.</p>
<p>So we write</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="dt">static</span> <span class="dt">uint32_t</span> procno = <span class="dv">0</span>;</a>
<a class="sourceLine" id="cb9-2" data-line-number="2"></a>
<a class="sourceLine" id="cb9-3" data-line-number="3"><span class="dt">uint32_t</span> __real_getNumberOfProcessors(<span class="dt">void</span>);</a>
<a class="sourceLine" id="cb9-4" data-line-number="4"></a>
<a class="sourceLine" id="cb9-5" data-line-number="5"><span class="dt">uint32_t</span> __wrap_getNumberOfProcessors(<span class="dt">void</span>)</a>
<a class="sourceLine" id="cb9-6" data-line-number="6">{</a>
<a class="sourceLine" id="cb9-7" data-line-number="7">   <span class="cf">if</span> (procno==<span class="dv">0</span>) {</a>
<a class="sourceLine" id="cb9-8" data-line-number="8">      <span class="cf">return</span> __real_getNumberOfProcessors();</a>
<a class="sourceLine" id="cb9-9" data-line-number="9">   } <span class="cf">else</span> {</a>
<a class="sourceLine" id="cb9-10" data-line-number="10">     <span class="cf">return</span> procno;</a>
<a class="sourceLine" id="cb9-11" data-line-number="11">   }</a>
<a class="sourceLine" id="cb9-12" data-line-number="12">}</a></code></pre></div>
<p>So get the desired result. We change cabal to provide required options to the build:</p>
<pre class="cabal"><code>  ghc-options:         -no-hs-main
                       -threaded
                       -optl-Wl,-wrap,getNumberOfProcessors</code></pre>
<p>You can find the full code on <a href="https://github.com/qnikst/haskell-fun/tree/master/ht-no-more">GitHub</a>. There is still much work for this project before you can use it for your application.</p>
<p>There is some further work.</p>
<ol type="1">
<li>the code could be cleared and prettified;</li>
<li>the code could be made portable and be able to run on all OSes GHC can run on;</li>
<li>The current approach may be not sub-optimal, maybe it’s enough to redefine <code>getNumberOfProcessors</code> alone without calling <code>sched_setaffinity</code>.</li>
<li>I didn’t test the interference with other functions; for example, if you run a program with <code>-xm</code> flag (that pins capability to CPU) may fail.</li>
<li>It’s possible to extend this solution and set better GC options based on CPU info</li>
<li>I’m curious if it is possible to write this program as a library and reuse in the other projects.</li>
</ol>
<p>All feedback is welcome.</p>]]></summary>
</entry>
<entry>
    <title>Making personal environment and long live dotfiles</title>
    <link href="https://qnikst.github.io/posts/2018-08-22-long-live-dotfiles.html" />
    <id>https://qnikst.github.io/posts/2018-08-22-long-live-dotfiles.html</id>
    <published>2018-08-22T00:00:00Z</published>
    <updated>2018-08-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Some time ago I installed <a href="https://nixos.org/">NixOS</a>, and one thing that I had a problem with was understanding how to set up user environment. You can can configure NixOS declaratively with a description in a single file <code>/etc/nixos/configuration.nix</code>, but all applications set up there get installed system-wide. Instead, you usually want to have your user environment to be configured per your user. Also you may want to move your environment from one host to another (possibly to another distribution or even to another OS). Updating configuration.nix looks like a too heavy-weight solution for such a task.</p>
<p>Other solutions that I’ve seen were building of one’s own environment or using <a href="https://github.com/tldr-pages/tldr/blob/master/pages/common/nix-env.md">nix-env</a> for installing applications per user. I was not able to adopt the former solution, and the latter does not provide declarative config, and one may collect lots of garbage of applications she runs once. Besides, it would be nice to control dotfiles in the same style.</p>
<p>One day my colleague <a href="https://github.com/nmattia">Nicolas Mattia</a> suggested me to look at the tool he uses, called <a href="https://github.com/nmattia/homies">homies</a>, the one he had excellently described in his <a href="http://nmattia.com/posts/2018-03-21-nix-reproducible-setup-linux-macos.html">blog</a>. I think everyone should read and check that :). Unfortunately, this approach, at least up to my understanding should exist for each user, because it’s not customisable. So I’ve started my project <a href="https://github.com/qnikst/homster">homster</a> that is solving the same problem. Currently it’s primarily based on the <code>homies</code> though in the future it’s going to diverge.</p>
<p>The general structure of the project is as follows. There is a <code>default.nix</code> file that describes all the packages and the modified ones that I use. In each modified package I pass my config, or it’s configured to read system config from the nix package directory so I can configure common options in the homster project and update them on the host by usual means.</p>
<p>So it seems that I have found the solution to all my needs and I can have a declarative configuration for the user environment. I still can use <code>nix-env -i</code> for temporarily needed packages, but <code>nix-env -f homster/default.nix -i --remove-all</code> command updates and cleans my environment. Most of the dotfiles can be kept in the project. Also, I can set up my environment anywhere where I can install <code>nix</code> package manager.</p>
<p>While implementing this the most interesting problem was <code>git</code>. Git searches for its configuration in 3 places according to the man page:</p>
<ol type="1">
<li>system-wide: <code>(prefix)/gitconfig</code></li>
<li>user-wide: <code>$(HOME)/.gitconfig</code> or <code>$XDG_CONFIG_DIR/git/gitconfig</code></li>
<li>project-wide: <code>~/.git/config</code></li>
</ol>
<p>Besides, it takes <code>--config</code> option that overrides config search entirely. We can’t use <code>--config</code> because that overrides project specific options, we can’t update user-wide file with nix, so the only option left is the system-wide config. So we need to understand what is <code>(prefix)</code>. Man pages tell that it’s a value of the <code>PREFIX</code> environment option. Let’s check nixpkgs:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode bash"><a class="sourceLine" id="cb1-1" data-line-number="1">    <span class="st">&quot;prefix=</span><span class="dt">\$</span><span class="st">{out}&quot;</span></a></code></pre></div>
<p>https://github.com/NixOS/nixpkgs/blob/54ba2c9afca07b0f14763b3697d00b637b2461e0/pkgs/applications/version-management/git-and-tools/git/default.nix#L86</p>
<p>It seems that nix installs that, but let us check it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="ex">strace</span> git config <span class="op">2&gt;&amp;1</span> <span class="kw">|</span> <span class="fu">grep</span> gitconfig</a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="ex">access</span>(<span class="st">&quot;/etc//gitconfig&quot;</span>, R_OK)         = <span class="ex">-1</span> ENOENT (No such file or directory)</a></code></pre></div>
<p>Seems not to be what we were expecting. The story continues, we need to understand where does git looks for a config. You can find it on GitHub (modulo the version that I’ve used, but it’s irrelevant for the code I’m interested in) <a href="https://github.com/git/git/blob/7e8bfb0412581daf8f3c89909f1d37844e8610dd/config.c#L1634-L1640" class="uri">https://github.com/git/git/blob/7e8bfb0412581daf8f3c89909f1d37844e8610dd/config.c#L1634-L1640</a></p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="dt">const</span> <span class="dt">char</span> *git_etc_gitconfig(<span class="dt">void</span>)</a>
<a class="sourceLine" id="cb3-2" data-line-number="2">{</a>
<a class="sourceLine" id="cb3-3" data-line-number="3">	<span class="dt">static</span> <span class="dt">const</span> <span class="dt">char</span> *system_wide;</a>
<a class="sourceLine" id="cb3-4" data-line-number="4">	<span class="cf">if</span> (!system_wide)</a>
<a class="sourceLine" id="cb3-5" data-line-number="5">		system_wide = system_path(ETC_GITCONFIG);</a>
<a class="sourceLine" id="cb3-6" data-line-number="6">	<span class="cf">return</span> system_wide;</a>
<a class="sourceLine" id="cb3-7" data-line-number="7">}</a></code></pre></div>
<p>Okay, what is <code>ETC_GITCONFIG</code> <a href="https://github.com/git/git/blob/1f1cddd558b54bb0ce19c8ace353fd07b758510d/configure.ac#L387-L391" class="uri">https://github.com/git/git/blob/1f1cddd558b54bb0ce19c8ace353fd07b758510d/configure.ac#L387-L391</a></p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="ex">GIT_PARSE_WITH_SET_MAKE_VAR</span>(gitconfig, ETC_GITCONFIG,</a>
<a class="sourceLine" id="cb4-2" data-line-number="2">			<span class="ex">Use</span> VALUE instead of /etc/gitconfig as the</a>
<a class="sourceLine" id="cb4-3" data-line-number="3">			<span class="ex">global</span> git configuration file.</a>
<a class="sourceLine" id="cb4-4" data-line-number="4">			<span class="ex">If</span> VALUE is not fully qualified it will be interpreted</a>
<a class="sourceLine" id="cb4-5" data-line-number="5">			<span class="fu">as</span> a path relative to the computed prefix at runtime.)</a></code></pre></div>
<p>Finally, after searching what <code>GIT_PARSE_WITH_SET_MAKE_VAR</code> means, we can find that we need to pass <code>--with-gitconfig=name</code> as a parameter to the configure.</p>
<p>So now we need to patch nix package for <code>git</code> to do that. As usual, we want to make it declaratively and easy to change without redoing the work that NixOS maintainers already did like applying patches and packaging.</p>
<p>Everything described above can be done pretty quickly in <code>nix</code>, in my <code>homster/git/default.nix</code> I can override default package for git as:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode nix"><code class="sourceCode bash"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="ex">git.overrideAttrs</span> (old: {</a>
<a class="sourceLine" id="cb5-2" data-line-number="2">   <span class="ex">configureFlags</span> = [ <span class="st">&quot;--with-gitconfig=</span><span class="va">$out</span><span class="st">/etc/gitconfig ];</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="st">})</span></a></code></pre></div>
<p><code>nix</code> interprets the <code>$out</code> variable and substitutes exact hash there. Then we can copy our file to the right place and get a new system-wide configuration that is controlled by us.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="ex">strace</span> git config <span class="op">2&gt;&amp;1</span> <span class="kw">|</span> <span class="fu">grep</span> gitconfig</a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="ex">access</span>(<span class="st">&quot;/nix/store/66hi8rssnvhlxbwjg3qkc4bcs76fp8np-git-2.16.4/etc/gitconfig&quot;</span>, R_OK) = <span class="ex">0</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3"><span class="ex">openat</span>(AT_FDCWD, <span class="st">&quot;/nix/store/66hi8rssnvhlxbwjg3qkc4bcs76fp8np-git-2.16.4/etc/gitconfig&quot;</span>, O_RDONLY) = <span class="ex">3</span></a></code></pre></div>
<p>exactly what is needed.</p>]]></summary>
</entry>
<entry>
    <title>simple chat server.</title>
    <link href="https://qnikst.github.io/posts/2018-05-05-irc-simple.html" />
    <id>https://qnikst.github.io/posts/2018-05-05-irc-simple.html</id>
    <published>2018-05-02T00:00:00Z</published>
    <updated>2018-05-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Few months ago one person asked me in twitter how is it possible to write anything in Haskell, and how can it help to write some low level application working with network.</p>
<p>As a result I’ve ended up with a simple non-complete <code>irc-simple</code> project. This project can’t be used as a real irc server in the real network. But it can be extended to support features. The main intent was to show how server could be written how to deal with communication, parsing, concurrency.</p>
<p>Unfortunately the project is documented in Russian, as it was written for the Russian non-haskell community. But if anyone would be interested in extending, translation or mistakes correction. That would be awesome.</p>
<p>Project itself can be found on:</p>
<p><a href="https://github.com/qnikst/irc-simple.git" class="uri">https://github.com/qnikst/irc-simple.git</a></p>]]></summary>
</entry>
<entry>
    <title>Cabal foreign libraries</title>
    <link href="https://qnikst.github.io/posts/2018-05-02-cabal-foreign-library.html" />
    <id>https://qnikst.github.io/posts/2018-05-02-cabal-foreign-library.html</id>
    <published>2018-05-02T00:00:00Z</published>
    <updated>2018-05-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>In this age of the <code>stack</code> domination, not everyone remembers the role of <code>Cabal</code> and cabal-install`. And still cabal and cabal-install do progress and introduce new features, that may benefit entire ecosystem. And it’s quite unfortunate that some of the changes remain unnoticed.</p>
<p>The big list of changes in Cabal-2.0 can be found <a href="http://coldwa.st/e/blog/2017-09-09-Cabal-2-0.html">here</a>. In this post I’d like to look into one single change: <strong>Foreign libraries support</strong>.</p>
<p>TLDR: you can find all documentation in the cabal <a href="https://www.haskell.org/cabal/users-guide/developing-packages.html#foreign-libraries">user-guide</a>, which is a very good resource to read anyway.</p>
<p>Let’s look into the problem solved by this feature. Sometimes we need to use Haskell in projects written in other language. This can be done either by making an Haskell executable and using some RPC to communicate between different components or by making a shared object. For a long time cabal did not support shared objects definition. Common solution for that problem was to create an <code>executable</code> section in cabal file, add <code>ghc-options</code> <code>-shared</code> and then play games with <code>-fPIC</code> support. That solution was doable but painfull and required knowledge of low level details.</p>
<p>And finally in cabal-2.0 a support for that usecase was introduced. Now we have a new stanza, <code>foreign-library</code> which means that <code>Cabal</code> will build a standalone library to be used with foreign languages.</p>
<p>Inside <code>foreign-library</code> block we can define <code>type</code> of the library:</p>
<ul>
<li><code>native-static</code> for static library (<code>.a</code>);</li>
<li><code>native-shared</code> for the dynamic library (<code>.so</code>).</li>
</ul>
<p>Currently only <code>native-shared</code> are supported.</p>
<p>If you are using windows you should remember to add <code>options: standlone</code> stanza. With this option <code>libHSrts</code> will not be required. You should not set this option otherwise.</p>
<p>A simple example:</p>
<p><code>foreign.cabal</code>:</p>
<pre class="cabal"><code>foreign-library     mylib
  type:             native-shared
  lib-version-info: 6:3:2
  build-depends:    base &gt;=4.9 &amp;&amp; &lt;4.10
  hs-source-dirs:   src
  other-modules     Lib
  default-language: Haskell2010</code></pre>
<p>If you have foreign exported modules, then you should also provide:</p>
<pre class="cabal"><code>library
  build-depends: base &gt;= 4.9 &amp;&amp; &lt;4.10
  hs-source-dirs: src
  other-modules:  Lib
  install-includes: Lib_stub.h
  default-language: Haskell2010
</code></pre>
<p>We need <code>Lib_stub.h</code> so header file will be installed in the system. See <a href="https://github.com/haskell/cabal/issues/5299">#5299</a>. This workaround helps with the problem but still you will not be able to call <code>cabal sdist</code> because it will try to copy autogenerated file that does not exist in filesystem.</p>
<p><code>src/Lib.hs</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">module</span> <span class="dt">Lib</span> (fac) <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"></a>
<a class="sourceLine" id="cb3-3" data-line-number="3">foreign export ccall<span class="ot"> fac ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="ot">fac ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5">fac n <span class="fu">=</span> product [<span class="dv">1</span><span class="fu">..</span>n]</a></code></pre></div>
<p>After <code>cabal install</code> you’ll get:</p>
<pre><code>~/.cabal/
~//cabal/libmylib.so -&gt; libmylib.so.4.2.3
~/.cabal/libmylib.so.4 -&gt; libmylib.so.4.2.3
~/.cabal/libmylib.so.4.2.3
~/.cabal/lib/x86_64-linux-ghc-8.0.2/foreign-0.1.0.0-22cwmsmBVpIHoSDwDYFUR6/include/Lib_stub.h</code></pre>
<p>Enjoy!</p>
<p>Update: problem with <code>sdist</code> can be worked around by using a buildinfo trick</p>
<ol type="1">
<li><p>create <code>foreign.buildinfo</code> file with the following contents:</p>
<pre><code>   install-includes: Lib_stub.h</code></pre></li>
<li><p>add section to cabal:</p>
<pre><code>extra-tmp-files: foreign.buildinfo</code></pre></li>
<li><p>remove <code>install-includes</code> stanza - now sdist works.</p></li>
</ol>
<p>Enjoy again!</p>]]></summary>
</entry>
<entry>
    <title>Things to know about exception handling.</title>
    <link href="https://qnikst.github.io/posts/2015-06-03-interesting-exceptions.html" />
    <id>https://qnikst.github.io/posts/2015-06-03-interesting-exceptions.html</id>
    <published>2015-06-03T00:00:00Z</published>
    <updated>2015-06-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Let’s take a look at the simple pattern, in this pattern we want to write an endless program for some purpose:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1">runit f <span class="fu">=</span> f <span class="ot">`onException`</span> (putStrLn <span class="st">&quot;exception!&quot;</span> <span class="fu">&gt;&gt;</span> runit f)</a></code></pre></div>
<p>Do you see a huge problem here? And this problem is not with code accuracy, inability to gracefully exit or something like that. There is another problem in this pattern. If you don’t then continue reading.</p>
<p>Assume <code>f</code> is some simple function that loops (for example <code>let f = forever yield</code>). Try to answer the following questions</p>
<ol type="1">
<li><p>what will happen if you run <code>runit f</code> in a separate thread (<code>forkIO $ runit f</code>)?</p></li>
<li><p>what will happen if you send an exception to the forked thread?</p></li>
<li><p>what will happen if you send another exception to that thread?</p></li>
</ol>
<p>Now you can try to check your guesses in ghci. If everything is ok then there is nothing new to read for you. However if you are lazy (and didn’t try to answer or run the code), you can continue.</p>
<p>Let’s try to test:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="fu">&gt;</span> <span class="fu">:</span>m <span class="dt">Control.Exception</span> <span class="dt">Control.Concurrent</span> <span class="dt">GHC.Conc</span> <span class="dt">Control.Monad</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="fu">&gt;</span> <span class="kw">let</span> runit f <span class="fu">=</span> f <span class="ot">`onException`</span> (putStrLn <span class="st">&quot;exception!&quot;</span> <span class="fu">&gt;&gt;</span> runit f)</a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="fu">&gt;</span> x <span class="ot">&lt;-</span> forkIO <span class="fu">$</span> runit <span class="fu">$</span> forever yield</a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="fu">&gt;</span> x</a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="dt">ThreadId</span> <span class="dv">154</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6"><span class="fu">&gt;</span> threadStatus x</a>
<a class="sourceLine" id="cb2-7" data-line-number="7"><span class="dt">ThreadRunning</span></a></code></pre></div>
<p>Ok everything as expected, thread is running and consuming 100% of one CPU. Now go to the step 2.:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="fu">&gt;</span> throwTo x (userError <span class="st">&quot;foo&quot;</span>)</a>
<a class="sourceLine" id="cb3-2" data-line-number="2">exc<span class="fu">&gt;</span> eption<span class="fu">!</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="fu">&gt;</span> threadStatus x</a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="dt">ThreadRunning</span></a></code></pre></div>
<p>Exception is caught, everything is OK. Now go to the 3.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="fu">&gt;</span> throwTo x (userError <span class="st">&quot;foo&quot;</span>)</a></code></pre></div>
<p>Hah.. It just hangs!!! We can interrupt it and check thread status</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="fu">&gt;</span> threadStatus x</a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="dt">ThreadRunning</span></a></code></pre></div>
<p>This is definitely not what could be expected. Lets try to understand what had happened.</p>
<p>As you know exception sending is synchronous in a sense, that <code>throwTo</code> call will not exit unless exception will be delivered to the thread (or the thread dies).</p>
<p>Quote from <a href="https://hackage.haskell.org/package/base-4.7.0.2/docs/Control-Concurrent.html">haddock</a>:</p>
<blockquote>
<p>Exception delivery synchronizes between the source and target thread: <code>throwTo</code> does not return until the exception has been raised in the target thread. The calling thread can thus be certain that the target thread has received the exception. Exception delivery is also atomic with respect to other exceptions. Atomicity is a useful property to have when dealing with race conditions: e.g. if there are two threads that can kill each other, it is guaranteed that only one of the threads will get to kill the other.</p>
</blockquote>
<p>It’s definitely not an issue of non-reaching safepoint, that is also possible. Another quote:</p>
<blockquote>
<p>In GHC, an exception can only be raised when a thread reaches a safe point, where a safe point is where memory allocation occurs. Some loops do not perform any memory allocation inside the loop and therefore cannot be interrupted by a <code>throwTo</code>.</p>
</blockquote>
<p>It could be a case if <code>f</code> would be something like <code>f = return $ last [1..]</code> compiled with optimizations turned on. But as we have seen the first exception was delivered successfully. And also we are not in a <em>FFI</em> call. The only left possibility is that the thread is in a masked state. Let’s check it:</p>
<pre><code>&gt; x &lt;- forkIO $ runit (getMaskingState &gt;&gt;= print  &gt;&gt; forever yield)
Unmasked
Prelude Control.Exception Control.Concurrent GHC.Conc Control.Monad&gt; throwTo x (userError &quot;bar&quot;)
exceptiPrelude Control.Exception Control.Concurrent GHC.Conc Control.Monad&gt; on!
MaskedInterruptible</code></pre>
<p>Yes, everything happened as we were expecting the thread is now in a masked state, and so exception can’t be delivered. But why? Maybe we need to take a look at <code>Control.Exception</code> module documentation? You may try, but at least in base-4.8.0 (and in the previous versions) these details were not documented.</p>
<p>But we can try to find out solution somewhere else, for example in RTS documentation:</p>
<blockquote>
<p>A thread can request that asynchronous exceptions not be delivered (“masked”) for the duration of an I/O computation. The primitives</p>
<p>maskAsyncExceptions# :: IO a -&gt; IO a</p>
<p>and</p>
<p>maskUninterruptible# :: IO a -&gt; IO a</p>
<p>are used for this purpose. During a masked section, asynchronous exceptions may be unmasked again temporarily:</p>
<p>unmaskAsyncExceptions# :: IO a -&gt; IO a</p>
<p>Furthermore, asynchronous exceptions are masked automatically during the execution of an exception handler. All three of these primitives leave a continuation on the stack which reverts to the previous state (masked interruptible, masked non-interruptible, or unmasked) on exit.</p>
</blockquote>
<p>Looks like a reason of our problem. Unfortunatelly it’s not in the documentation that usual user would read, but a nice thing to know.</p>
<p>And original code should look like the following:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1">runit f <span class="fu">=</span> mask <span class="fu">$</span> \release <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">  ev <span class="ot">&lt;-</span> try <span class="fu">$</span> release f</a>
<a class="sourceLine" id="cb7-3" data-line-number="3">  <span class="kw">case</span> ev <span class="kw">of</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">    <span class="dt">Left</span> _ <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;exception&quot;</span> <span class="fu">&gt;&gt;</span> release (runit f)</a>
<a class="sourceLine" id="cb7-5" data-line-number="5">    <span class="dt">Right</span> x <span class="ot">-&gt;</span> return x</a></code></pre></div>
<p>You’ll need to pass exception type you are interested in or use <code>catches</code>.</p>
<p>I hope you enjoyed reading this, despite a terrible English that I have.</p>]]></summary>
</entry>
<entry>
    <title>Logging all exceptions in ghci</title>
    <link href="https://qnikst.github.io/posts/2015-04-30-grabbing-exceptions.html" />
    <id>https://qnikst.github.io/posts/2015-04-30-grabbing-exceptions.html</id>
    <published>2015-04-30T00:00:00Z</published>
    <updated>2015-04-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>On one resource there was a question how to log all exception in GHCI. There was a use case where user could start a background processes and some exceptions could be lost.</p>
<p>In a normal program you can use <code>-prof</code> compilation option and run program with <code>+RTS -xc</code> in order to get exceptions messages and stack-traces logged. However I assume that most of the ghc users doesn’t have <code>ghc</code> compiled with profiling flags. So we need to find another option.</p>
<p>And there is a solution. Every forked thread installs a exceptions handler:</p>
<p>From <a href="https://hackage.haskell.org/package/base-4.8.0.0/docs/src/GHC-Conc-Sync.html#forkIO">GHC.Cons.Sym</a></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="ot">forkIO ::</span> <span class="dt">IO</span> () <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">ThreadId</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">forkIO action <span class="fu">=</span> <span class="dt">IO</span> <span class="fu">$</span> \ s <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">   <span class="kw">case</span> (fork<span class="fu">#</span> action_plus s) <span class="kw">of</span> (<span class="fu">#</span> s1, tid <span class="fu">#</span>) <span class="ot">-&gt;</span> (<span class="fu">#</span> s1, <span class="dt">ThreadId</span> tid <span class="fu">#</span>)</a>
<a class="sourceLine" id="cb1-4" data-line-number="4">    <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5">      action_plus <span class="fu">=</span> catchException action childHandler</a></code></pre></div>
<p>From <a href="">GHC.IO</a></p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="co">{-</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="co">catchException used to handle the passing around of the state to the</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="co">action and the handler.  This turned out to be a bad idea - it meant</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="co">that we had to wrap both arguments in thunks so they could be entered</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="co">as normal (remember IO returns an unboxed pair...).</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6"></a>
<a class="sourceLine" id="cb2-7" data-line-number="7"><span class="co">Now catch# has type</span></a>
<a class="sourceLine" id="cb2-8" data-line-number="8"></a>
<a class="sourceLine" id="cb2-9" data-line-number="9"><span class="co">catch# :: IO a -&gt; (b -&gt; IO a) -&gt; IO a</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10"></a>
<a class="sourceLine" id="cb2-11" data-line-number="11"><span class="co">(well almost; the compiler doesn&#39;t know about the IO newtype so we</span></a>
<a class="sourceLine" id="cb2-12" data-line-number="12"><span class="co">have to work around that in the definition of catchException below).</span></a>
<a class="sourceLine" id="cb2-13" data-line-number="13"><span class="co">-}</span></a>
<a class="sourceLine" id="cb2-14" data-line-number="14"><span class="ot">catchException ::</span> <span class="dt">Exception</span> e <span class="ot">=&gt;</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> (e <span class="ot">-&gt;</span> <span class="dt">IO</span> a) <span class="ot">-&gt;</span> <span class="dt">IO</span> a</a></code></pre></div>
<p>In order to set hander we can use:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="ot">setUncaughtExceptionHandler ::</span> (<span class="dt">SomeException</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()) <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</a></code></pre></div>
<p>In order to add something to ghci we can load a script by passing it with <code>-ghci-script</code> option</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="fu">:</span>m <span class="dt">GHC.Conc.Sync</span> <span class="dt">Control.Exception</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"><span class="fu">:</span>{</a>
<a class="sourceLine" id="cb4-4" data-line-number="4"><span class="kw">let</span><span class="ot"> uncaughtExceptionHandler ::</span> <span class="dt">SomeException</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb4-5" data-line-number="5">    uncaughtExceptionHandler e <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb4-6" data-line-number="6">        putStrLn <span class="fu">$</span> <span class="st">&quot;Unhandled exception: &quot;</span> <span class="fu">++</span> show e</a>
<a class="sourceLine" id="cb4-7" data-line-number="7"><span class="fu">:</span>}</a>
<a class="sourceLine" id="cb4-8" data-line-number="8"></a>
<a class="sourceLine" id="cb4-9" data-line-number="9">setUncaughtExceptionHandler uncaughtExceptionHandler</a>
<a class="sourceLine" id="cb4-10" data-line-number="10"></a>
<a class="sourceLine" id="cb4-11" data-line-number="11"><span class="fu">:</span>m <span class="fu">-</span><span class="dt">GHC.Conc.Sync</span> <span class="dt">Control.Exception</span></a></code></pre></div>
<p>And load it with <code>ghci -ghci-script script.hs</code>.</p>
<pre><code>qnikst@localhost ~ $ ghci -ghci-script script.hs 
GHCi, version 7.8.4: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude&gt; :m +Control.Exception Control.Concurrent
Prelude Control.Exception Control.Concurrent&gt; forkIO $ threadDelay 10000 &gt;&gt; error &quot;yo!&quot;
ThreadId 28
Prelude Control.Exception Control.Concurrent&gt; Unhandled exception: yo!</code></pre>]]></summary>
</entry>
<entry>
    <title>Approaches to carry a proof for typelevel natural</title>
    <link href="https://qnikst.github.io/posts/2014-12-16-fun-with-typelevel-naturals.markdown.html" />
    <id>https://qnikst.github.io/posts/2014-12-16-fun-with-typelevel-naturals.markdown.html</id>
    <published>2014-12-16T00:00:00Z</published>
    <updated>2014-12-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>For time ago Bas van Dijk asked a question on glasgow-haskell-users mailing list about <a href="https://www.haskell.org/pipermail/glasgow-haskell-users/2014-November/025451.html">proving the properties of type-level natural numbers obtained by user</a>. That lead to an interesting discussion, that you can read in the list archives.</p>
<p>The problem was that we want to impose a constraint on some typelevel natural and then read value from user and guarantee that we have that constraint. For such constraint we took (&lt;=255).</p>
<p>Here is a file that describe few approaches to solve this problem.</p>
<p>At first we need to use a HUGE list of pragmas.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="ot">{-# LANGUAGE DataKinds #-}</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="ot">{-# LANGUAGE GADTs #-}</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3"><span class="ot">{-# LANGUAGE TypeOperators #-}</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4"><span class="ot">{-# LANGUAGE ScopedTypeVariables #-}</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5"><span class="ot">{-# LANGUAGE KindSignatures #-}</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6"><span class="ot">{-# LANGUAGE ExistentialQuantification #-}</span></a>
<a class="sourceLine" id="cb1-7" data-line-number="7"><span class="ot">{-# LANGUAGE ViewPatterns #-}</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8"><span class="ot">{-# LANGUAGE PolyKinds #-}</span></a>
<a class="sourceLine" id="cb1-9" data-line-number="9"><span class="ot">{-# LANGUAGE TypeFamilies #-}</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10"><span class="ot">{-# LANGUAGE UndecidableInstances #-}</span></a>
<a class="sourceLine" id="cb1-11" data-line-number="11"><span class="ot">{-# LANGUAGE ConstraintKinds #-}</span></a>
<a class="sourceLine" id="cb1-12" data-line-number="12"><span class="ot">{-# LANGUAGE RankNTypes #-}</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13"><span class="ot">{-# LANGUAGE FlexibleInstances #-}</span></a>
<a class="sourceLine" id="cb1-14" data-line-number="14"><span class="ot">{-# LANGUAGE MultiParamTypeClasses #-}</span></a></code></pre></div>
<p>And relax compiler options a bit.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="ot">{-# OPTIONS_GHC -ftype-function-depth=1024 #-}</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="ot">{-# OPTIONS_GHC -fcontext-stack=1024 #-}</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="kw">import</span> <span class="dt">GHC.TypeLits</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="kw">import</span> <span class="dt">GHC.Exts</span> </a>
<a class="sourceLine" id="cb2-6" data-line-number="6"><span class="kw">import</span> <span class="dt">Data.Proxy</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7"><span class="kw">import</span> <span class="dt">Data.Constraint</span></a>
<a class="sourceLine" id="cb2-8" data-line-number="8"><span class="kw">import</span> <span class="dt">Data.Type.Bool</span></a>
<a class="sourceLine" id="cb2-9" data-line-number="9"><span class="kw">import</span> <span class="dt">Data.Type.Equality</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10"><span class="kw">import</span> <span class="dt">System.Environment</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11"><span class="kw">import</span> <span class="dt">Unsafe.Coerce</span></a>
<a class="sourceLine" id="cb2-12" data-line-number="12"><span class="kw">import</span> <span class="dt">Data.Singletons</span></a>
<a class="sourceLine" id="cb2-13" data-line-number="13"><span class="kw">import</span> <span class="dt">Control.Monad</span></a></code></pre></div>
<h2 id="attempt-1-tagged-value">Attempt-1: Tagged value</h2>
<p>We can keep a proof together with value, so we can introduce a new type:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Proof</span> n  (<span class="ot">c ::</span> <span class="dt">Constraint</span>) <span class="kw">where</span> <span class="dt">Proof</span><span class="ot"> ::</span> <span class="dt">Proxy</span> n <span class="ot">-&gt;</span> <span class="dt">Proof</span> n c</a></code></pre></div>
<p>In mailing list I provide following code:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="ot">fromSomeError ::</span> <span class="dt">SomeNat</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Proof</span> n (n <span class="fu">&lt;=</span> <span class="dv">255</span>))</a>
<a class="sourceLine" id="cb4-2" data-line-number="2">fromSomeError (<span class="dt">SomeNat</span> p)</a>
<a class="sourceLine" id="cb4-3" data-line-number="3">   <span class="fu">|</span> natVal p <span class="fu">&lt;=</span> <span class="dv">255</span> <span class="fu">=</span> <span class="dt">Just</span> (<span class="dt">Proof</span> (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> n))</a>
<a class="sourceLine" id="cb4-4" data-line-number="4">   <span class="fu">|</span> otherwise <span class="fu">=</span> <span class="dt">Nothing</span></a></code></pre></div>
<p>This is obviously a bug as we check natVal p, but return Proxy n. And correct version fails, as there is no way to simply inject a constraint.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="co">{-</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="co">fromSome :: SomeNat -&gt; Maybe (Proof n (n &lt;= 255))</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="co">fromSome (SomeNat p)</span></a>
<a class="sourceLine" id="cb5-4" data-line-number="4"><span class="co">  | natVal p &lt;= 255 = Just (Proof p)</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5"><span class="co">  | otherwise = Nothing</span></a>
<a class="sourceLine" id="cb5-6" data-line-number="6"><span class="co">-}</span></a></code></pre></div>
<pre><code> Proof.lhs:53:37:
    Could not deduce (n1 ~ n)
    from the context (KnownNat n1)
    bound by a pattern with constructor
        SomeNat :: forall (n :: Nat). KnownNat n =&gt; Proxy n -&gt; SomeNat,
	in an equation for ‘fromSome’
	at Proof.lhs:52:13-21</code></pre>
<h2 id="attempt-2-type-carrier">Attempt-2: Type carrier</h2>
<p>Now we want to have the following constraint on out Nat</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Proof2</span><span class="ot"> ::</span> (<span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="dt">Constraint</span>) <span class="ot">-&gt;</span> <span class="fu">*</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">  <span class="dt">Proof2</span><span class="ot"> ::</span> c n <span class="ot">=&gt;</span> <span class="dt">Proxy</span> n <span class="ot">-&gt;</span> <span class="dt">Proof2</span> c</a></code></pre></div>
<p>In order to have a ‘curried’ version of our constaint we can introduce a type family</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="kw">type</span> family <span class="dt">LessThan255</span><span class="ot"> n ::</span> <span class="dt">Constraint</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2">    <span class="dt">LessThan255</span> f <span class="fu">=</span> (f <span class="fu">&lt;=</span> <span class="dv">255</span>)</a></code></pre></div>
<p>Now lets try to create a proof from known natural:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="co">{-</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2"><span class="co">strange :: (LessThan255 n) =&gt; Proxy n -&gt; Proof2 LessThan255</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3"><span class="co">strange = Proof2</span></a>
<a class="sourceLine" id="cb9-4" data-line-number="4"><span class="co">-}</span></a></code></pre></div>
<p>~~~~~~~~~~~~~~~ Proof.lhs:89:13: Could not deduce (LessThan255 n) arising from a use of ‘Proof2’ from the context (LessThan255 n) bound by the type signature for strange :: (LessThan255 n) =&gt; Proxy n -&gt; Proof2 LessThan255 ~~~~~~~~~~~~~~</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="ot">strange ::</span> (<span class="dt">LessThan255</span> <span class="fu">~</span> c, c n) <span class="ot">=&gt;</span> <span class="dt">Proxy</span> n <span class="ot">-&gt;</span> <span class="dt">Proof2</span> c</a>
<a class="sourceLine" id="cb10-2" data-line-number="2">strange <span class="fu">=</span> <span class="dt">Proof2</span></a></code></pre></div>
<p>Previous attempt to build function failed, but this one works. I don’t know if it’s related to non-injectivity or a bug.. I can report it :)</p>
<p>When I realized this problem, I have stopped.</p>
<p>Update. As Richard Eisenberg says:</p>
<pre><code>By the way, the bug in the Proof2 version is a bug in GHC 7.8.3
(only in .3 -- not in .2 or in the soon-to-be .4) that allows you
to write unsaturated type families that don&#39;t work.
Saying `LessThan255` without a parameter should be a syntax error,
but that check was accidentally turned off for 7.8.3, leading to a bogus type error.</code></pre>
<h2 id="attempt-3-carry-a-contraint-in-a-datatype">Attempt-3: carry a contraint in a datatype</h2>
<p>Now let’s keep our ‘constraint’ in a datatype, here we have 2 proxy, one for datatype, and one for value, also a KnownNat constraint that we want to use later:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Proof3</span><span class="ot"> ::</span> (<span class="dt">Nat</span> <span class="ot">-&gt;</span> <span class="fu">*</span>) <span class="ot">-&gt;</span> <span class="fu">*</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2">  <span class="dt">Proof3</span><span class="ot"> ::</span> <span class="dt">KnownNat</span> n <span class="ot">=&gt;</span> c n <span class="ot">-&gt;</span> <span class="dt">Proxy</span> n <span class="ot">-&gt;</span> <span class="dt">Proof3</span> c</a></code></pre></div>
<p>We can introduce a Show instance</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Show</span> (<span class="dt">Proof3</span> c) <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2">  show (<span class="dt">Proof3</span> _ k) <span class="fu">=</span> show <span class="fu">$</span> natVal k</a></code></pre></div>
<p>And now we can introduce a LessThen constraint as a datatype:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="kw">data</span> <span class="dt">LessThan255D</span> (<span class="ot">n::</span><span class="dt">Nat</span>) <span class="kw">where</span> <span class="dt">LessThan255D</span><span class="ot"> ::</span> (n <span class="fu">&lt;=</span> <span class="dv">255</span>) <span class="ot">=&gt;</span> <span class="dt">LessThan255D</span> n</a></code></pre></div>
<p>We can convert type level constrant to data easily:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="ot">c2d ::</span> <span class="dt">LessThan255</span> n <span class="ot">=&gt;</span> <span class="dt">Proxy</span> n <span class="ot">-&gt;</span> <span class="dt">LessThan255D</span> n</a>
<a class="sourceLine" id="cb15-2" data-line-number="2">c2d _ <span class="fu">=</span> <span class="dt">LessThan255D</span></a></code></pre></div>
<p>But what about a proof, ideally we want to have following code:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="co">{-</span></a>
<a class="sourceLine" id="cb16-2" data-line-number="2"><span class="co">fromSome3 :: SomeNat -&gt; Maybe (Proof3 LessThan255D)</span></a>
<a class="sourceLine" id="cb16-3" data-line-number="3"><span class="co">fromSome3 (SomeNat p)</span></a>
<a class="sourceLine" id="cb16-4" data-line-number="4"><span class="co">   | natVal p &lt; natVal t255 = Just (Proof3 LessThan255D p)</span></a>
<a class="sourceLine" id="cb16-5" data-line-number="5"><span class="co">   | otherwise = Nothing</span></a>
<a class="sourceLine" id="cb16-6" data-line-number="6"><span class="co">   where t255 = Proxy :: Proxy 255</span></a>
<a class="sourceLine" id="cb16-7" data-line-number="7"><span class="co">-}</span></a></code></pre></div>
<pre><code>Proof.lhs:138:46:
  Could not deduce ((n &lt;=? 255) ~ &#39;True)
  from the context (KnownNat n)</code></pre>
<p>It doesn’t work simply because value level check doesn’t guarantee typelevel properties.</p>
<p>One way to solve it is to use unsafeCoerce: the idea is to use a proof for the value we know, and then coerce a type of a proof to the type of the proof related to the users value:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="ot">fromSome3 ::</span> <span class="dt">SomeNat</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Proof3</span> <span class="dt">LessThan255D</span>)</a>
<a class="sourceLine" id="cb18-2" data-line-number="2">fromSome3 (<span class="dt">SomeNat</span> p)</a>
<a class="sourceLine" id="cb18-3" data-line-number="3">   <span class="fu">|</span> natVal p <span class="fu">&lt;</span> natVal t255 <span class="fu">=</span> <span class="dt">Just</span> (fake (c2d t255) p)</a>
<a class="sourceLine" id="cb18-4" data-line-number="4">   <span class="fu">|</span> otherwise <span class="fu">=</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb18-5" data-line-number="5">   <span class="kw">where</span> t255 <span class="fu">=</span> <span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dv">255</span></a>
<a class="sourceLine" id="cb18-6" data-line-number="6"><span class="ot">         fake ::</span> <span class="dt">KnownNat</span> n <span class="ot">=&gt;</span> c p <span class="ot">-&gt;</span> <span class="dt">Proxy</span> n <span class="ot">-&gt;</span> <span class="dt">Proof3</span> c</a>
<a class="sourceLine" id="cb18-7" data-line-number="7">         fake k p <span class="fu">=</span> <span class="dt">Proof3</span> (unsafeCoerce<span class="ot"> k ::</span> c n) p</a></code></pre></div>
<p>It’s a nice solution, it’s unsafe as typechecker does not check that our predicate <code>(natVal (p::Proxy n) &lt; natVal (t255::Proxy 255))</code> implies the safety of a coerce from <code>LessThan255 ~ 255 -&gt; LessThan255 ~ p</code>.</p>
<p>There is one more solution that is really typesafe, but has a big complexity, and require a bounded set of values:</p>
<p>We can try to check is equal to one specific value from the set.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="ot">guessProof ::</span> (<span class="dt">KnownNat</span> n, n <span class="fu">&lt;=</span> <span class="dv">255</span>) <span class="ot">=&gt;</span> <span class="dt">SomeNat</span> <span class="ot">-&gt;</span> <span class="dt">Proxy</span> n <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Proof3</span> <span class="dt">LessThan255D</span>)</a>
<a class="sourceLine" id="cb19-2" data-line-number="2">guessProof (<span class="dt">SomeNat</span> p) n <span class="fu">=</span> <span class="kw">case</span> sameNat p n <span class="kw">of</span></a>
<a class="sourceLine" id="cb19-3" data-line-number="3">    <span class="dt">Just</span> _  <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="fu">$</span> <span class="dt">Proof3</span> <span class="dt">LessThan255D</span> n</a>
<a class="sourceLine" id="cb19-4" data-line-number="4">    <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></a></code></pre></div>
<p>Now we can build all set of values that are good:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" data-line-number="1"><span class="kw">type</span> family <span class="dt">Guesses</span> (<span class="ot">n::</span><span class="dt">Nat</span>)<span class="ot"> ::</span> [<span class="dt">Nat</span>] <span class="kw">where</span></a>
<a class="sourceLine" id="cb20-2" data-line-number="2">   <span class="dt">Guesses</span> <span class="dv">0</span> <span class="fu">=</span> <span class="ch">&#39;[0]</span></a>
<a class="sourceLine" id="cb20-3" data-line-number="3">   <span class="dt">Guesses</span> n <span class="fu">=</span> n <span class="ch">&#39;: Guesses (n-1)</span></a></code></pre></div>
<p>And write a code that will check all possible values:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" data-line-number="1"><span class="kw">class</span> <span class="dt">GuessProof</span> (<span class="ot">n ::</span> [<span class="dt">Nat</span>]) <span class="kw">where</span></a>
<a class="sourceLine" id="cb21-2" data-line-number="2"><span class="ot">  proof ::</span> <span class="dt">SomeNat</span> <span class="ot">-&gt;</span> <span class="dt">Proxy</span> n <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Proof3</span> <span class="dt">LessThan255D</span>)</a>
<a class="sourceLine" id="cb21-3" data-line-number="3"></a>
<a class="sourceLine" id="cb21-4" data-line-number="4"><span class="kw">instance</span> <span class="dt">GuessProof</span> <span class="ch">&#39;[] where</span></a>
<a class="sourceLine" id="cb21-5" data-line-number="5">  proof _ _ <span class="fu">=</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb21-6" data-line-number="6"></a>
<a class="sourceLine" id="cb21-7" data-line-number="7"><span class="kw">instance</span> (<span class="dt">KnownNat</span> n, n <span class="fu">&lt;=</span> <span class="dv">255</span>, <span class="dt">GuessProof</span> ns) <span class="ot">=&gt;</span> <span class="dt">GuessProof</span> (n <span class="ch">&#39;: ns) where</span></a>
<a class="sourceLine" id="cb21-8" data-line-number="8">  proof s p <span class="fu">=</span> guessProof s (inner p) <span class="ot">`mplus`</span> proof s (next p)</a>
<a class="sourceLine" id="cb21-9" data-line-number="9">   <span class="kw">where</span><span class="ot"> inner ::</span> <span class="dt">Proxy</span> (n <span class="ch">&#39;: ns) -&gt; Proxy (n::Nat)</span></a>
<a class="sourceLine" id="cb21-10" data-line-number="10">         inner _ <span class="fu">=</span> <span class="dt">Proxy</span></a>
<a class="sourceLine" id="cb21-11" data-line-number="11"><span class="ot">         next ::</span> <span class="dt">Proxy</span> (n <span class="ch">&#39;: ns) -&gt; Proxy (ns::[Nat])</span></a>
<a class="sourceLine" id="cb21-12" data-line-number="12">         next _ <span class="fu">=</span> <span class="dt">Proxy</span></a></code></pre></div>
<p>It’s not very usable, have a bad complexity and require to change ghc options but it works and it’s safe.</p>
<p>Now let’s test our code:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb22-1" data-line-number="1"><span class="ot">f2 ::</span> (c <span class="fu">~</span> (n <span class="fu">&lt;=</span> <span class="dv">255</span>)) <span class="ot">=&gt;</span> <span class="dt">Proof3</span> <span class="dt">LessThan255D</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb22-2" data-line-number="2">f2 (<span class="dt">Proof3</span> n p) <span class="fu">=</span> print <span class="fu">$</span> natVal p</a></code></pre></div>
<div class="sourceCode" id="cb23"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb23-1" data-line-number="1"><span class="ot">test1 ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb23-2" data-line-number="2">test1 <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb23-3" data-line-number="3">    n <span class="ot">&lt;- readLn ::</span> <span class="dt">IO</span> <span class="dt">Integer</span></a>
<a class="sourceLine" id="cb23-4" data-line-number="4"></a>
<a class="sourceLine" id="cb23-5" data-line-number="5">    <span class="kw">case</span> someNatVal n <span class="kw">of</span></a>
<a class="sourceLine" id="cb23-6" data-line-number="6">      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> error <span class="st">&quot;Input is not a natural number!&quot;</span></a>
<a class="sourceLine" id="cb23-7" data-line-number="7">      <span class="dt">Just</span> sn <span class="ot">-&gt;</span> <span class="kw">case</span> fromSome3 sn <span class="kw">of</span></a>
<a class="sourceLine" id="cb23-8" data-line-number="8">                   <span class="dt">Just</span> p <span class="ot">-&gt;</span> f2 p</a>
<a class="sourceLine" id="cb23-9" data-line-number="9">                   _ <span class="ot">-&gt;</span> error <span class="st">&quot;Input if larger than 255&quot;</span></a></code></pre></div>
<div class="sourceCode" id="cb24"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb24-1" data-line-number="1"><span class="ot">test2 ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb24-2" data-line-number="2">test2 <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb24-3" data-line-number="3">  n <span class="ot">&lt;- readLn ::</span> <span class="dt">IO</span> <span class="dt">Integer</span></a>
<a class="sourceLine" id="cb24-4" data-line-number="4">  <span class="kw">case</span> someNatVal n <span class="kw">of</span></a>
<a class="sourceLine" id="cb24-5" data-line-number="5">      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> error <span class="st">&quot;Input is not a natural number!&quot;</span></a>
<a class="sourceLine" id="cb24-6" data-line-number="6">      <span class="dt">Just</span> sn <span class="ot">-&gt;</span> <span class="kw">case</span> proof sn (g (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dv">255</span>)) <span class="kw">of</span></a>
<a class="sourceLine" id="cb24-7" data-line-number="7">                   <span class="dt">Just</span> p <span class="ot">-&gt;</span> f2 p</a>
<a class="sourceLine" id="cb24-8" data-line-number="8">                   _ <span class="ot">-&gt;</span> error <span class="st">&quot;Input if larger than 255&quot;</span></a>
<a class="sourceLine" id="cb24-9" data-line-number="9">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb24-10" data-line-number="10"><span class="ot">    g ::</span> <span class="dt">Proxy</span> n <span class="ot">-&gt;</span> <span class="dt">Proxy</span> (<span class="dt">Guesses</span> n)</a>
<a class="sourceLine" id="cb24-11" data-line-number="11">    g _ <span class="fu">=</span> <span class="dt">Proxy</span></a></code></pre></div>
<h2 id="attempt-5-singletons">Attempt 5: Singletons</h2>
<p>This is not the only solution, one more solution was provided by Richard Eisenberg I have not found it in mailing list archives so including it here.</p>
<p>The idea is that we may use less effective representation for typelevel naturals, i.e. unary naturals we can build a proof using singletons:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb25-1" data-line-number="1"><span class="ot">{-# LANGUAGE TemplateHaskell, DataKinds, PolyKinds, TypeFamilies,</span></a>
<a class="sourceLine" id="cb25-2" data-line-number="2"><span class="ot">             ScopedTypeVariables, TypeOperators, UndecidableInstances,</span></a>
<a class="sourceLine" id="cb25-3" data-line-number="3"><span class="ot">             GADTs, RankNTypes #-}</span></a>
<a class="sourceLine" id="cb25-4" data-line-number="4"><span class="ot">{-# OPTIONS_GHC -ftype-function-depth=300 -fcontext-stack=300 #-}</span></a>
<a class="sourceLine" id="cb25-5" data-line-number="5"></a>
<a class="sourceLine" id="cb25-6" data-line-number="6"><span class="kw">import</span> <span class="dt">Data.Singletons.TH</span></a>
<a class="sourceLine" id="cb25-7" data-line-number="7"><span class="kw">import</span> <span class="dt">GHC.TypeLits</span> <span class="kw">hiding</span> ( <span class="dt">Nat</span> )</a>
<a class="sourceLine" id="cb25-8" data-line-number="8"></a>
<a class="sourceLine" id="cb25-9" data-line-number="9"><span class="fu">$</span>(singletons [d|</a>
<a class="sourceLine" id="cb25-10" data-line-number="10">  data Nat = Zero | Succ Nat</a>
<a class="sourceLine" id="cb25-11" data-line-number="11"></a>
<a class="sourceLine" id="cb25-12" data-line-number="12">  leNat :: Nat -&gt; Nat -&gt; Bool</a>
<a class="sourceLine" id="cb25-13" data-line-number="13">  leNat Zero     _        = True</a>
<a class="sourceLine" id="cb25-14" data-line-number="14">  leNat (Succ _) Zero     = False</a>
<a class="sourceLine" id="cb25-15" data-line-number="15">  leNat (Succ a) (Succ b) = a `leNat` b</a>
<a class="sourceLine" id="cb25-16" data-line-number="16">  |])</a>
<a class="sourceLine" id="cb25-17" data-line-number="17"></a>
<a class="sourceLine" id="cb25-18" data-line-number="18"><span class="co">-- | Singletons&#39;s &#39;withSomeSing&#39; is what we want, but a bug in 7.8.3 doesn&#39;t</span></a>
<a class="sourceLine" id="cb25-19" data-line-number="19"><span class="co">-- let it work without a specialized type for &#39;Nat&#39;s</span></a>
<a class="sourceLine" id="cb25-20" data-line-number="20"><span class="ot">withSomeNat ::</span> <span class="dt">Nat</span> <span class="ot">-&gt;</span> (forall (<span class="ot">n ::</span> <span class="dt">Nat</span>)<span class="fu">.</span> <span class="dt">Sing</span> n <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> r</a>
<a class="sourceLine" id="cb25-21" data-line-number="21">withSomeNat <span class="fu">=</span> withSomeSing</a>
<a class="sourceLine" id="cb25-22" data-line-number="22"></a>
<a class="sourceLine" id="cb25-23" data-line-number="23"><span class="co">-- | Conveniently generate unary naturals</span></a>
<a class="sourceLine" id="cb25-24" data-line-number="24"><span class="kw">type</span> family <span class="dt">U</span> n <span class="kw">where</span></a>
<a class="sourceLine" id="cb25-25" data-line-number="25">  <span class="dt">U</span> <span class="dv">0</span> <span class="fu">=</span> <span class="dt">Zero</span></a>
<a class="sourceLine" id="cb25-26" data-line-number="26">  <span class="dt">U</span> n <span class="fu">=</span> <span class="dt">Succ</span> (<span class="dt">U</span> (n<span class="fu">-</span><span class="dv">1</span>))</a>
<a class="sourceLine" id="cb25-27" data-line-number="27"></a>
<a class="sourceLine" id="cb25-28" data-line-number="28"><span class="ot">toNat ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Nat</span></a>
<a class="sourceLine" id="cb25-29" data-line-number="29">toNat n <span class="fu">|</span> n <span class="fu">&lt;</span> <span class="dv">0</span>      <span class="fu">=</span> <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb25-30" data-line-number="30">        <span class="fu">|</span> otherwise  <span class="fu">=</span> <span class="dt">Just</span> <span class="fu">$</span> go n</a>
<a class="sourceLine" id="cb25-31" data-line-number="31">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb25-32" data-line-number="32">    go <span class="dv">0</span> <span class="fu">=</span> <span class="dt">Zero</span></a>
<a class="sourceLine" id="cb25-33" data-line-number="33">    go n <span class="fu">=</span> <span class="dt">Succ</span> (go (n<span class="fu">-</span><span class="dv">1</span>))</a>
<a class="sourceLine" id="cb25-34" data-line-number="34"></a>
<a class="sourceLine" id="cb25-35" data-line-number="35"><span class="kw">type</span> <span class="dt">Bound</span> <span class="fu">=</span> <span class="dt">U</span> <span class="dv">255</span></a>
<a class="sourceLine" id="cb25-36" data-line-number="36"></a>
<a class="sourceLine" id="cb25-37" data-line-number="37"><span class="co">-- easier to test in GHCi than a proper &#39;main&#39;</span></a>
<a class="sourceLine" id="cb25-38" data-line-number="38"><span class="ot">go ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb25-39" data-line-number="39">go n <span class="fu">=</span></a>
<a class="sourceLine" id="cb25-40" data-line-number="40">   <span class="kw">case</span> toNat n <span class="kw">of</span></a>
<a class="sourceLine" id="cb25-41" data-line-number="41">     <span class="dt">Nothing</span>  <span class="ot">-&gt;</span> putStrLn <span class="st">&quot;Input is not a natural number!&quot;</span></a>
<a class="sourceLine" id="cb25-42" data-line-number="42">     <span class="dt">Just</span> nat <span class="ot">-&gt;</span> putStrLn <span class="fu">$</span> withSomeNat nat <span class="fu">$</span> \ snat <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb25-43" data-line-number="43">       <span class="kw">case</span> snat <span class="ot">`sLeNat`</span> (<span class="ot">sing ::</span> <span class="dt">Sing</span> <span class="dt">Bound</span>) <span class="kw">of</span></a>
<a class="sourceLine" id="cb25-44" data-line-number="44">         <span class="dt">STrue</span>  <span class="ot">-&gt;</span> f snat</a>
<a class="sourceLine" id="cb25-45" data-line-number="45">         <span class="dt">SFalse</span> <span class="ot">-&gt;</span> <span class="st">&quot;Didn&#39;t work&quot;</span></a>
<a class="sourceLine" id="cb25-46" data-line-number="46"></a>
<a class="sourceLine" id="cb25-47" data-line-number="47"><span class="ot">f ::</span> forall proxy (<span class="ot">n ::</span> <span class="dt">Nat</span>)<span class="fu">.</span> (n <span class="ot">`LeNat`</span> <span class="dt">Bound</span>) <span class="fu">~</span> <span class="dt">True</span> <span class="ot">=&gt;</span> proxy n <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb25-48" data-line-number="48">f _ <span class="fu">=</span> <span class="st">&quot;It worked!&quot;</span></a></code></pre></div>
<h2 id="attempt-6-using-luquid-haskell">Attempt 6: Using Luquid haskell</h2>
<p>Ranjit Jhala, provided a great solution for liquid haskell, that could be found either by <a href="http://goto.ucsd.edu:8090/index.html#?demo=permalink%2F1418064183.hs">url</a> or here:</p>
<hr />
<div class="sourceCode" id="cb26"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb26-1" data-line-number="1"></a>
<a class="sourceLine" id="cb26-2" data-line-number="2"><span class="co">{-@ LIQUID &quot;--no-termination&quot; @-}</span></a>
<a class="sourceLine" id="cb26-3" data-line-number="3"></a>
<a class="sourceLine" id="cb26-4" data-line-number="4"><span class="kw">module</span> <span class="dt">Nat255</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb26-5" data-line-number="5"></a>
<a class="sourceLine" id="cb26-6" data-line-number="6"><span class="co">-- | Define a predicate for valid integers</span></a>
<a class="sourceLine" id="cb26-7" data-line-number="7"></a>
<a class="sourceLine" id="cb26-8" data-line-number="8"><span class="co">{-@ predicate IsValid X = 0 &lt;= X &amp;&amp; X &lt; 255 @-}</span></a>
<a class="sourceLine" id="cb26-9" data-line-number="9"></a>
<a class="sourceLine" id="cb26-10" data-line-number="10"><span class="co">-- | Use the predicate to define a refinement type (subset) of valid integers</span></a>
<a class="sourceLine" id="cb26-11" data-line-number="11"></a>
<a class="sourceLine" id="cb26-12" data-line-number="12"><span class="co">{-@ type Valid = {v:Int | IsValid v}        @-}</span></a>
<a class="sourceLine" id="cb26-13" data-line-number="13"></a>
<a class="sourceLine" id="cb26-14" data-line-number="14"><span class="co">-- | A function that checks whether a given Int is indeed valid</span></a>
<a class="sourceLine" id="cb26-15" data-line-number="15"></a>
<a class="sourceLine" id="cb26-16" data-line-number="16"><span class="co">{-@ isValid   :: n:Int -&gt; {v:Bool | Prop v &lt;=&gt; IsValid n} @-}</span></a>
<a class="sourceLine" id="cb26-17" data-line-number="17">isValid n     <span class="fu">=</span> <span class="dv">0</span> <span class="fu">&lt;=</span> n <span class="fu">&amp;&amp;</span> n <span class="fu">&lt;</span> (<span class="dv">255</span><span class="ot"> ::</span> <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb26-18" data-line-number="18"></a>
<a class="sourceLine" id="cb26-19" data-line-number="19"><span class="co">-- | A function that can only be called with Valid Ints.</span></a>
<a class="sourceLine" id="cb26-20" data-line-number="20"></a>
<a class="sourceLine" id="cb26-21" data-line-number="21"><span class="co">{-@ workWithValidNumber :: Valid -&gt; IO () @-}</span> </a>
<a class="sourceLine" id="cb26-22" data-line-number="22">workWithValidNumber n <span class="fu">=</span> putStrLn <span class="fu">$</span> <span class="st">&quot;This is a valid number&quot;</span> <span class="fu">++</span> show (<span class="ot">n ::</span> <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb26-23" data-line-number="23"></a>
<a class="sourceLine" id="cb26-24" data-line-number="24"><span class="co">-- | This is fine...</span></a>
<a class="sourceLine" id="cb26-25" data-line-number="25">ok    <span class="fu">=</span> workWithValidNumber <span class="dv">12</span></a>
<a class="sourceLine" id="cb26-26" data-line-number="26"></a>
<a class="sourceLine" id="cb26-27" data-line-number="27"><span class="co">-- | ... But this is not.        </span></a>
<a class="sourceLine" id="cb26-28" data-line-number="28">notOk <span class="fu">=</span> workWithValidNumber <span class="dv">257</span></a>
<a class="sourceLine" id="cb26-29" data-line-number="29"></a>
<a class="sourceLine" id="cb26-30" data-line-number="30"><span class="co">-- | Finally the top level loop that inputs a number, tests it </span></a>
<a class="sourceLine" id="cb26-31" data-line-number="31"><span class="co">--   and calls `workWithValidNumber` if the number is valid.</span></a>
<a class="sourceLine" id="cb26-32" data-line-number="32"></a>
<a class="sourceLine" id="cb26-33" data-line-number="33">loop <span class="fu">=</span> <span class="kw">do</span> putStrLn <span class="st">&quot;Enter Number between 0 and 255&quot;</span></a>
<a class="sourceLine" id="cb26-34" data-line-number="34">          n <span class="ot">&lt;- readLn ::</span> <span class="dt">IO</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb26-35" data-line-number="35">          <span class="kw">if</span> isValid n</a>
<a class="sourceLine" id="cb26-36" data-line-number="36">             <span class="kw">then</span> workWithValidNumber n</a>
<a class="sourceLine" id="cb26-37" data-line-number="37">             <span class="kw">else</span> putStrLn <span class="st">&quot;Humph, bad input, try again!&quot;</span> <span class="fu">&gt;&gt;</span> loop</a></code></pre></div>
<p>I hope you have enjoyed reading this.</p>]]></summary>
</entry>
<entry>
    <title>Compositional methods for numerical ODE integrators</title>
    <link href="https://qnikst.github.io/posts/2014-08-18-compositional-methods.html" />
    <id>https://qnikst.github.io/posts/2014-08-18-compositional-methods.html</id>
    <published>2014-08-18T00:00:00Z</published>
    <updated>2014-08-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>We show a way to improve properties of a ODE integrators, by introducing a composition of the methods with a different steps.</p>
<!--more-->
<p>This post is based on the work of the Ernst Harrier [<a href="http://www.springer.com/mathematics/computational+science+%26+engineering/book/978-3-540-30663-4">1</a>] and doesn’t contain any additional research work.</p>
<p>Here we want to solve a system of equations that can we written as:</p>
<p><span class="math display">\[ \dot{y} = f(y). \]</span></p>
<p>In order to solve it we are introducing a mapping from an old state at <span class="math inline">\(t0\)</span> to a new one at <span class="math inline">\(t_1 = t_0 + dt\)</span>:</p>
<p><span class="math display">\[\Phi_h: y_{n} \rightarrow  y_{n+1}\]</span></p>
<p>In order to increase the order of the solution while preserving some desirable properties of the base method we may prepare a compositional method:</p>
<p><span class="math display">\[\Psi_h = \Phi_{\gamma_1h} \circ \ldots \circ \Phi_{\gamma_nh},\]</span></p>
<p>where <span class="math inline">\(\gamma_i\)</span> is a coefficient from <span class="math inline">\(\mathbb R\)</span>. This approach was studied by Suzuki, Yoshina, McLackcan in 1990th. Here we compose a base method at a different points in time.</p>
<p>We have a theorem about this approach to compositional methods.</p>
<p><em>Theorem</em></p>
<blockquote>
<p>Let <span class="math inline">\(\Phi_h\)</span> be a one-step method of order <span class="math inline">\(p\)</span>. If</p>
<p><span class="math display">\[
\begin{eqnarray}
\gamma_1 + \ldots + \gamma_s = 1 \\
\gamma_1^{p+1} + \ldots + \gamma_s^{p+1} = 0 \\
\end{eqnarray}
\]</span> then the compositional method <span class="math inline">\(\Psi_h\)</span> is at least of the order <span class="math inline">\(p+1\)</span>.</p>
</blockquote>
<p>This gives theorem gives us a nice way to improve properties of the existing method. The question now is how to find a good coefficients <span class="math inline">\(\gamma_i\)</span>.</p>
<p>The first notice is that equations does not have a real solution for the odd <span class="math inline">\(p\)</span>, so we can improve only solutions with even <span class="math inline">\(p\)</span>.</p>
<p>The smallest number <span class="math inline">\(s\)</span> where a solution in reals exists is <span class="math inline">\(3\)</span>. And coefficients are defined as:</p>
<p><span class="math display">\[ \gamma_1 = \gamma_3 = \frac{1}{2 - 2^{\frac{1}{p+1}}} \]</span></p>
<p><span class="math display">\[ \gamma_2 = - \frac{2^{\frac{1}{p+1}}}{2 - 2^{\frac{1}{p+1}}} \]</span></p>
<p>This method is called tripple jump. Lets check how does it work.</p>
<p>At first we will introduce a coefficients</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="ot">g1 ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">g1 p <span class="fu">=</span>  <span class="dv">1</span> <span class="fu">/</span> (<span class="dv">2</span> <span class="fu">-</span> <span class="dv">2</span><span class="fu">**</span>(<span class="dv">1</span><span class="fu">/</span>(fromIntegral p<span class="fu">+</span><span class="dv">1</span>)))</a>
<a class="sourceLine" id="cb1-3" data-line-number="3"></a>
<a class="sourceLine" id="cb1-4" data-line-number="4"><span class="ot">g2 ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5">g2 p <span class="fu">=</span> <span class="fu">-</span> <span class="dv">2</span><span class="fu">**</span>(<span class="dv">1</span><span class="fu">/</span>(fromIntegral p<span class="fu">+</span><span class="dv">1</span>)) <span class="fu">/</span> ( <span class="dv">2</span> <span class="fu">-</span> <span class="dv">2</span><span class="fu">**</span>(<span class="dv">1</span><span class="fu">/</span>(fromIntegral p<span class="fu">+</span><span class="dv">1</span>)))</a>
<a class="sourceLine" id="cb1-6" data-line-number="6"></a>
<a class="sourceLine" id="cb1-7" data-line-number="7"><span class="ot">g3 ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">g3 <span class="fu">=</span> g1</a></code></pre></div>
<p>Having a method of an order 2 (for example standard Runge-Kutta method) we may use a composition a points defined by <span class="math inline">\(\gamma_i\)</span> with <span class="math inline">\(p=2\)</span>. Let step be a <span class="math inline">\(dt = 1\)</span> for simplicity.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="fu">&gt;</span><span class="ot"> t ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> [<span class="dt">Double</span>]</a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="fu">&gt;</span> t p dt <span class="fu">=</span> map (<span class="fu">*</span>dt) [g1 p, g2 p, g3 p]</a>
<a class="sourceLine" id="cb2-3" data-line-number="3"></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> t <span class="dv">2</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5">[<span class="fl">1.3512071919596578</span>,<span class="fu">-</span><span class="fl">1.7024143839193153</span>,<span class="fl">1.3512071919596578</span>]</a></code></pre></div>
<p>We have 3 points. If we will take a compositional method <span class="math inline">\(\Psi\)</span> in the points we got then we will have a method of order <span class="math inline">\(3\)</span>. However if you method is symmetric then it’s order is <span class="math inline">\(4\)</span> and we can apply a tripple jump once again to our composed method.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="fu">&gt;</span><span class="ot"> ut ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [<span class="dt">Double</span>] <span class="ot">-&gt;</span> [<span class="dt">Double</span>]</a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="fu">&gt;</span> ut p xs <span class="fu">=</span> xs <span class="fu">&gt;&gt;=</span> (\x <span class="ot">-&gt;</span> t (p<span class="fu">+</span><span class="dv">2</span>) x)</a>
<a class="sourceLine" id="cb3-3" data-line-number="3"></a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> ut <span class="dv">4</span> (t <span class="dv">2</span> <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb3-5" data-line-number="5">[<span class="fl">1.5081944151591316</span>,<span class="fu">-</span><span class="fl">1.665181638358605</span>,<span class="fl">1.5081944151591316</span>,<span class="fu">-</span><span class="fl">1.900205890992877</span></a>
<a class="sourceLine" id="cb3-6" data-line-number="6">,<span class="fl">2.097997398066439</span>,<span class="fu">-</span><span class="fl">1.900205890992877</span>,<span class="fl">1.5081944151591316</span>,<span class="fu">-</span><span class="fl">1.665181638358605</span>,<span class="fl">1.5081944151591316</span>]</a></code></pre></div>
<p>This is a coefficients for a compositional method of order <span class="math inline">\(5\)</span>, (<span class="math inline">\(6\)</span> due to symmetry. Applying tripple jump nce again:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> ut <span class="dv">6</span> \<span class="fu">$</span> ut <span class="dv">4</span> (t <span class="dv">2</span> <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb4-2" data-line-number="2">[<span class="fl">1.639448210847001</span>,<span class="fu">-</span><span class="fl">1.77070200653487</span>,<span class="fl">1.639448210847001</span>,<span class="fu">-</span><span class="fl">1.8100975778074668</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3">,<span class="fl">1.955013517256328</span>,<span class="fu">-</span><span class="fl">1.8100975778074668</span>,<span class="fl">1.639448210847001</span>,<span class="fu">-</span><span class="fl">1.77070200653487</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4">,<span class="fl">1.639448210847001</span>,<span class="fu">-</span><span class="fl">2.0655753110586246</span>,<span class="fl">2.2309447311243717</span>,<span class="fu">-</span><span class="fl">2.0655753110586246</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">,<span class="fl">2.2805800406433505</span>,<span class="fu">-</span><span class="fl">2.4631626832202618</span>,<span class="fl">2.2805800406433505</span>,<span class="fu">-</span><span class="fl">2.0655753110586246</span></a>
<a class="sourceLine" id="cb4-6" data-line-number="6">,<span class="fl">2.2309447311243717</span>,<span class="fu">-</span><span class="fl">2.0655753110586246</span>,<span class="fl">1.639448210847001</span>,<span class="fu">-</span><span class="fl">1.77070200653487</span></a>
<a class="sourceLine" id="cb4-7" data-line-number="7">,<span class="fl">1.639448210847001</span>,<span class="fu">-</span><span class="fl">1.8100975778074668</span>,<span class="fl">1.955013517256328</span>,<span class="fu">-</span><span class="fl">1.8100975778074668</span></a>
<a class="sourceLine" id="cb4-8" data-line-number="8">,<span class="fl">1.639448210847001</span>,<span class="fu">-</span><span class="fl">1.77070200653487</span>,<span class="fl">1.639448210847001</span>]</a></code></pre></div>
<p>this is a compositional method of order 8.</p>
<p>To see a places where function will be evaluated we can use:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> scanl (<span class="fu">+</span>) <span class="dv">0</span> <span class="fu">$</span> ut <span class="dv">6</span> <span class="fu">$</span> ut <span class="dv">4</span> (t <span class="dv">2</span> <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb5-2" data-line-number="2">[<span class="fl">0.0</span>,<span class="fl">1.639448210847001</span>,<span class="fu">-</span><span class="fl">0.131253795687869</span>,<span class="fl">1.508194415159132</span>,<span class="fu">-</span><span class="fl">0.30190316264833483</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3">,<span class="fl">1.6531103546079933</span>,<span class="fu">-</span><span class="fl">0.15698722319947356</span>,<span class="fl">1.4824609876475274</span>,<span class="fu">-</span><span class="fl">0.28824101888734255</span></a>
<a class="sourceLine" id="cb5-4" data-line-number="4">,<span class="fl">1.3512071919596584</span>,<span class="fu">-</span><span class="fl">0.7143681190989661</span>,<span class="fl">1.5165766120254056</span>,<span class="fu">-</span><span class="fl">0.548998699033219</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5">,<span class="fl">1.7315813416101316</span>,<span class="fu">-</span><span class="fl">0.7315813416101302</span>,<span class="fl">1.5489986990332203</span>,<span class="fu">-</span><span class="fl">0.5165766120254043</span></a>
<a class="sourceLine" id="cb5-6" data-line-number="6">,<span class="fl">1.7143681190989675</span>,<span class="fu">-</span><span class="fl">0.3512071919596571</span>,<span class="fl">1.2882410188873439</span>,<span class="fu">-</span><span class="fl">0.4824609876475261</span></a>
<a class="sourceLine" id="cb5-7" data-line-number="7">,<span class="fl">1.156987223199475</span>,<span class="fu">-</span><span class="fl">0.6531103546079919</span>,<span class="fl">1.3019031626483362</span>,<span class="fu">-</span><span class="fl">0.5081944151591307</span></a>
<a class="sourceLine" id="cb5-8" data-line-number="8">,<span class="fl">1.1312537956878703</span>,<span class="fu">-</span><span class="fl">0.6394482108469997</span>,<span class="fl">1.0000000000000013</span>]</a></code></pre></div>
<p>This way we may obtain a method of any order by the price of a terrible zig-zag of the step points.</p>
<p>Another approach to a compositional method is using Suzuki`s Fractals.</p>
<p>The same schema exists for Suzuki`s Fractals, however how we have a diffierent coefficients:</p>
<p><span class="math display">\[
\begin{eqnarray}
  \gamma_1 = \gamma_2 = \gamma_4 = \gamma_5 = \frac{1}{4-4^{\frac{1}{p+1}}} \\
  \gamma_3 = - \frac{4^{\frac{1}{p+1}}}{4-4^{\frac{1}{p+1}}}
\end{eqnarray}
\]</span></p>
<p>However <span class="math inline">\(t\)</span> and <span class="math inline">\(ut\)</span> methods looks quite ugly and we may want to improve this situation.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="ot">{-# LANGUAGE DataKinds #-}</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="ot">{-# LANGUAGE KindSignatures #-}</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3"><span class="ot">{-# LANGUAGE TypeFamilies #-}</span></a>
<a class="sourceLine" id="cb6-4" data-line-number="4"><span class="ot">{-# LANGUAGE FlexibleContexts #-}</span></a>
<a class="sourceLine" id="cb6-5" data-line-number="5"><span class="ot">{-# LANGUAGE TypeOperators #-}</span></a>
<a class="sourceLine" id="cb6-6" data-line-number="6"><span class="ot">{-# LANGUAGE MultiParamTypeClasses #-}</span></a>
<a class="sourceLine" id="cb6-7" data-line-number="7"><span class="ot">{-# LANGUAGE FlexibleInstances #-}</span></a>
<a class="sourceLine" id="cb6-8" data-line-number="8"><span class="ot">{-# LANGUAGE ConstraintKinds #-}</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9"><span class="ot">{-# LANGUAGE ScopedTypeVariables #-}</span></a>
<a class="sourceLine" id="cb6-10" data-line-number="10"><span class="ot">{-# LANGUAGE UndecidableInstances #-}</span></a>
<a class="sourceLine" id="cb6-11" data-line-number="11"></a>
<a class="sourceLine" id="cb6-12" data-line-number="12"><span class="kw">import</span> <span class="dt">GHC.TypeLits</span></a>
<a class="sourceLine" id="cb6-13" data-line-number="13"><span class="kw">import</span> <span class="dt">GHC.Exts</span> (<span class="dt">Constraint</span>)</a>
<a class="sourceLine" id="cb6-14" data-line-number="14"><span class="kw">import</span> <span class="dt">Data.Proxy</span></a>
<a class="sourceLine" id="cb6-15" data-line-number="15"></a>
<a class="sourceLine" id="cb6-16" data-line-number="16"><span class="co">-- Coefficients</span></a>
<a class="sourceLine" id="cb6-17" data-line-number="17"><span class="ot">g1 ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb6-18" data-line-number="18">g1 p <span class="fu">=</span>  <span class="dv">1</span> <span class="fu">/</span> (<span class="dv">2</span> <span class="fu">-</span> <span class="dv">2</span><span class="fu">**</span>(<span class="dv">1</span><span class="fu">/</span>(fromIntegral p<span class="fu">+</span><span class="dv">1</span>)))</a>
<a class="sourceLine" id="cb6-19" data-line-number="19"></a>
<a class="sourceLine" id="cb6-20" data-line-number="20"><span class="ot">g2 ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb6-21" data-line-number="21">g2 p <span class="fu">=</span> <span class="fu">-</span> <span class="dv">2</span><span class="fu">**</span>(<span class="dv">1</span><span class="fu">/</span>(fromIntegral p<span class="fu">+</span><span class="dv">1</span>)) <span class="fu">/</span> ( <span class="dv">2</span> <span class="fu">-</span> <span class="dv">2</span><span class="fu">**</span>(<span class="dv">1</span><span class="fu">/</span>(fromIntegral p<span class="fu">+</span><span class="dv">1</span>)))</a>
<a class="sourceLine" id="cb6-22" data-line-number="22"></a>
<a class="sourceLine" id="cb6-23" data-line-number="23"><span class="ot">g3 ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb6-24" data-line-number="24">g3 <span class="fu">=</span> g1</a>
<a class="sourceLine" id="cb6-25" data-line-number="25"></a>
<a class="sourceLine" id="cb6-26" data-line-number="26"><span class="co">-- Description of the method</span></a>
<a class="sourceLine" id="cb6-27" data-line-number="27"><span class="kw">data</span> <span class="dt">RK2</span> <span class="fu">=</span> <span class="dt">RK2</span></a>
<a class="sourceLine" id="cb6-28" data-line-number="28"></a>
<a class="sourceLine" id="cb6-29" data-line-number="29"><span class="co">-- Description of the method order</span></a>
<a class="sourceLine" id="cb6-30" data-line-number="30"><span class="kw">type</span> family <span class="dt">Order</span><span class="ot"> a ::</span> <span class="dt">Nat</span></a>
<a class="sourceLine" id="cb6-31" data-line-number="31"><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">Order</span> <span class="dt">RK2</span> <span class="fu">=</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb6-32" data-line-number="32"></a>
<a class="sourceLine" id="cb6-33" data-line-number="33"><span class="co">-- Description of symmetric properties of the method</span></a>
<a class="sourceLine" id="cb6-34" data-line-number="34"><span class="kw">type</span> family <span class="dt">IsSymmetric</span><span class="ot"> a ::</span> <span class="dt">Constraint</span></a>
<a class="sourceLine" id="cb6-35" data-line-number="35"><span class="kw">type</span> <span class="kw">instance</span> <span class="dt">IsSymmetric</span> <span class="dt">RK2</span> <span class="fu">=</span> ()</a>
<a class="sourceLine" id="cb6-36" data-line-number="36"></a>
<a class="sourceLine" id="cb6-37" data-line-number="37"><span class="co">-- One level composition</span></a>
<a class="sourceLine" id="cb6-38" data-line-number="38"><span class="ot">buildComposePoints ::</span> forall p <span class="fu">.</span> <span class="dt">KnownNat</span> (<span class="dt">Order</span> p)</a>
<a class="sourceLine" id="cb6-39" data-line-number="39">                   <span class="ot">=&gt;</span> p <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> [<span class="dt">Double</span>]</a>
<a class="sourceLine" id="cb6-40" data-line-number="40">buildComposePoints p dt <span class="fu">=</span> map (<span class="fu">*</span>dt) [g1 o, g2 o, g3 o]</a>
<a class="sourceLine" id="cb6-41" data-line-number="41">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-42" data-line-number="42">    o <span class="fu">=</span> natVal (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">Order</span> p))</a>
<a class="sourceLine" id="cb6-43" data-line-number="43"></a>
<a class="sourceLine" id="cb6-44" data-line-number="44"><span class="co">-- Composition for the symmetric method</span></a>
<a class="sourceLine" id="cb6-45" data-line-number="45"><span class="ot">buildComposePointsSym ::</span> forall p n <span class="fu">.</span> (<span class="dt">UpdateCompose</span> (<span class="dt">Order</span> p <span class="fu">+</span> <span class="dv">2</span>) n, <span class="dt">IsSymmetric</span> p, <span class="dt">KnownNat</span> (<span class="dt">Order</span> p), <span class="dt">KnownNat</span> n)</a>
<a class="sourceLine" id="cb6-46" data-line-number="46">                      <span class="ot">=&gt;</span> p <span class="ot">-&gt;</span> <span class="dt">Proxy</span> n <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> [<span class="dt">Double</span>]</a>
<a class="sourceLine" id="cb6-47" data-line-number="47">buildComposePointsSym p pn dt <span class="fu">=</span> update (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> ((<span class="dt">Order</span> p) <span class="fu">+</span> <span class="dv">2</span>)) pn (buildComposePoints p dt)</a>
<a class="sourceLine" id="cb6-48" data-line-number="48"></a>
<a class="sourceLine" id="cb6-49" data-line-number="49"><span class="kw">class</span> <span class="dt">UpdateCompose</span> (<span class="ot">k ::</span> <span class="dt">Nat</span>) (<span class="ot">v::</span><span class="dt">Nat</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-50" data-line-number="50"><span class="ot">  update ::</span> <span class="dt">Proxy</span> k <span class="ot">-&gt;</span> <span class="dt">Proxy</span> v <span class="ot">-&gt;</span> [<span class="dt">Double</span>] <span class="ot">-&gt;</span> [<span class="dt">Double</span>]</a>
<a class="sourceLine" id="cb6-51" data-line-number="51"></a>
<a class="sourceLine" id="cb6-52" data-line-number="52"><span class="kw">class</span> <span class="dt">UpdateComposeCase</span> (<span class="ot">leq ::</span> <span class="dt">Bool</span>) (<span class="ot">k ::</span> <span class="dt">Nat</span>) (<span class="ot">v ::</span> <span class="dt">Nat</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-53" data-line-number="53"><span class="ot">  updateCase ::</span> <span class="dt">Proxy</span> leq <span class="ot">-&gt;</span> <span class="dt">Proxy</span> k <span class="ot">-&gt;</span> <span class="dt">Proxy</span> v <span class="ot">-&gt;</span> [<span class="dt">Double</span>] <span class="ot">-&gt;</span> [<span class="dt">Double</span>]</a>
<a class="sourceLine" id="cb6-54" data-line-number="54"></a>
<a class="sourceLine" id="cb6-55" data-line-number="55"><span class="kw">instance</span> <span class="dt">UpdateComposeCase</span> (k <span class="fu">&lt;=?</span> v) k v <span class="ot">=&gt;</span> <span class="dt">UpdateCompose</span> k v <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-56" data-line-number="56">  update <span class="fu">=</span> updateCase (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (k <span class="fu">&lt;=?</span> v))</a>
<a class="sourceLine" id="cb6-57" data-line-number="57"></a>
<a class="sourceLine" id="cb6-58" data-line-number="58"><span class="kw">instance</span> <span class="dt">UpdateComposeCase</span> <span class="dt">False</span> k v <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-59" data-line-number="59">  updateCase _ _ _ <span class="fu">=</span> id</a>
<a class="sourceLine" id="cb6-60" data-line-number="60">  </a>
<a class="sourceLine" id="cb6-61" data-line-number="61"><span class="kw">instance</span> (<span class="dt">KnownNat</span> k, <span class="dt">UpdateCompose</span> (k<span class="fu">+</span><span class="dv">2</span>) v) <span class="ot">=&gt;</span> <span class="dt">UpdateComposeCase</span> <span class="dt">True</span> k v <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-62" data-line-number="62">  updateCase _ k v ds <span class="fu">=</span> update (plus2 k) v (ds <span class="fu">&gt;&gt;=</span> \x <span class="ot">-&gt;</span> map (<span class="fu">*</span>x) [g1 o, g2 o, g3 o])</a>
<a class="sourceLine" id="cb6-63" data-line-number="63">    <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-64" data-line-number="64">      o <span class="fu">=</span> natVal k</a>
<a class="sourceLine" id="cb6-65" data-line-number="65"><span class="ot">      plus2 ::</span> <span class="dt">Proxy</span> n <span class="ot">-&gt;</span> <span class="dt">Proxy</span> (n<span class="fu">+</span><span class="dv">2</span>)</a>
<a class="sourceLine" id="cb6-66" data-line-number="66">      plus2 _ <span class="fu">=</span> <span class="dt">Proxy</span></a></code></pre></div>]]></summary>
</entry>
<entry>
    <title>Formal Power series in haskell</title>
    <link href="https://qnikst.github.io/posts/2014-08-11-series.markdown.html" />
    <id>https://qnikst.github.io/posts/2014-08-11-series.markdown.html</id>
    <published>2014-08-12T00:00:00Z</published>
    <updated>2014-08-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Code and math in this post is done with the great help of Korolyov V. This post is written as a literate haskell file so it’s possible to copy it in a text file and run it in ghci. All sources can be found in <a href="https://github.com/qnikst/haskell-fun/tree/master/series">haskell-fun</a> repository.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="ot">{-# LANGUAGE BangPatterns #-}</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="kw">import</span> <span class="dt">Control.Monad.Fix</span></a></code></pre></div>
<p>We want to implement a with formal series expansion using haskell. Formal series can be expressed as follows:</p>
<p><span class="math display">\[ f(x) = \sum\limits_{i=0}^\infty a_ix^i \]</span></p>
<p>And also address a Taylor series as an example. For a function <span class="math inline">\(f\)</span> we can expand it an any given point <span class="math inline">\(x_0\)</span>, then:</p>
<p><span class="math display">\[ f(x) = f(x_0) + \sum_{k=1}\frac{f^{(k)}}{k!}(x-x_0)^k \]</span></p>
<p>Here we wanto to introduce a data structure that is capable for representation of such series. For such datastructure we have 2 main candidates:</p>
<ol type="1">
<li><p>List - a datastructure with two constructors that represent a possibly infinite single-linked list.</p></li>
<li><p>Stream - a datastructure with one constructor that represent an infinite stream of values.</p></li>
</ol>
<p>We may want to select a list because this way we may represent a finite series (as some functions have all coefficients equal to <span class="math inline">\(0\)</span> starting at some point, or if function diverge than all element will be represented as machine zero starting at some point). But we decide to use ‘Stream’ data type in order not to have a branching in functions.</p>
<p>It’s possible to use an existing library for <code>Stream</code> – <a href="https://hackage.haskell.org/package/Stream">Stream package</a>. However here we decide to implement our own data type for educational purposes. However if this module will grow to a real library the implementation likely will be changed to the one from the common package.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">data</span> <span class="dt">S</span> a <span class="fu">=</span> <span class="dt">S</span> <span class="fu">!</span>a (<span class="dt">S</span> a)</a></code></pre></div>
<p>## Instances</p>
<p>Having a data structure we may define a set of instances.</p>
<p>### Functor</p>
<p>Series is a Functor:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">S</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">   fmap f (<span class="dt">S</span> a x) <span class="fu">=</span> <span class="dt">S</span> (f a) (fmap f x)</a></code></pre></div>
<p>An interesting note that <span class="math inline">\(fmap ~ (f :: a \to b)\)</span> moves a function that is represented by a serie from <span class="math inline">\(a \to a\)</span> to <span class="math inline">\(b \to b\)</span> that may not be a desired behaviour when <span class="math inline">\(a \neq b\)</span>.</p>
<p>### Num</p>
<p>In order to use series in calculations we need to define a <code>Num</code> instance. But befor we will introduce few helpers:</p>
<p>A product of scalar and series:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="ot">(^*) ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb4-2" data-line-number="2">(<span class="fu">^*</span>) a <span class="fu">=</span> fmap (<span class="fu">*</span>a)</a></code></pre></div>
<div class="sourceCode" id="cb5"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="ot">(*^) ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb5-2" data-line-number="2">(<span class="fu">*^</span>) <span class="fu">=</span> flip (<span class="fu">^*</span>)</a></code></pre></div>
<div class="sourceCode" id="cb6"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="ot">(/^) ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb6-2" data-line-number="2">(<span class="fu">/^</span>) s a <span class="fu">=</span> fmap (<span class="fu">/</span> a) s</a></code></pre></div>
<p>And pointwise product for future (see Library section for szipWith implementation):</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="ot">(^*^) ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb7-2" data-line-number="2">(<span class="fu">^*^</span>) <span class="fu">=</span> szipWith (<span class="fu">*</span>)</a></code></pre></div>
<p>Now we may give a ‘Num’ instance:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">Num</span> (<span class="dt">S</span> a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2">  (<span class="dt">S</span> a x) <span class="fu">+</span> (<span class="dt">S</span> b y) <span class="fu">=</span> <span class="dt">S</span> (a <span class="fu">+</span> b) (x <span class="fu">+</span> y)</a>
<a class="sourceLine" id="cb8-3" data-line-number="3">  abs s <span class="fu">=</span> fmap abs s</a>
<a class="sourceLine" id="cb8-4" data-line-number="4">  negate s <span class="fu">=</span> fmap negate s</a>
<a class="sourceLine" id="cb8-5" data-line-number="5">  signum s <span class="fu">=</span> fmap signum s</a>
<a class="sourceLine" id="cb8-6" data-line-number="6">  (<span class="dt">S</span> a x) <span class="fu">*</span> (<span class="dt">S</span> b y) <span class="fu">=</span> <span class="dt">S</span> (a <span class="fu">*</span> b) (a <span class="fu">^*</span> y <span class="fu">+</span>  b <span class="fu">^*</span> x <span class="fu">+</span> <span class="dt">S</span> <span class="dv">0</span> (x <span class="fu">*</span> y))</a>
<a class="sourceLine" id="cb8-7" data-line-number="7">  fromInteger x <span class="fu">=</span> <span class="dt">S</span> (fromInteger x) <span class="dv">0</span></a></code></pre></div>
<p>Here are 2 tricky parts, first one is implementation of <code>*</code> second one is implementation of <code>fromInteger</code>. For <code>*</code> we need to think of an expansion like of polymonial, i.e. <span class="math inline">\(S a b = a + b \cdot p\)</span>. Then we can write the following:</p>
<p><span class="math display">\[
\begin{aligned}
 (S~a~x) \cdot (S~b~y) &amp;= (a + x p) \cdot (b + y p) = \\
  &amp;= (a b + a y p + b x p + x y p^2) = \\
  &amp;= S~(a b)~(a y + b x + x y p)     = \\
  &amp;= S~(a b)~(fmap~(*a)~y + fmap~(*b)~x + S~0~(x * y))
\end{aligned}
\]</span></p>
<p>There are 2 possible implementations for fromInteger:</p>
<ol type="1">
<li><p><code>fromInteger x = S (fromInteger x) (fromInteger x)</code></p></li>
<li><p><code>fromInteger x = S (fromInteger x) 0</code></p></li>
</ol>
<p>For <code>fromInteger</code> we need to select an implemention such that <span class="math inline">\(fromInteger 1 * a == a\)</span> <span class="math inline">\(fromInteger 0 + a = a\)</span> <span class="math inline">\(fromInteger 0 * a == 0\)</span> for any <span class="math inline">\(a\)</span>. So then we see that we can select only the second one, otherwise properties for <span class="math inline">\(1\)</span> will not hold.</p>
<p>### Fractional</p>
<p>Now we can add a simple Fractional instance.</p>
<p>We say that <span class="math inline">\((S\,b\,y) = \cfrac{1}{(S\, a\, x)}\)</span> iff <span class="math inline">\((S\, b\, y)\)</span> is the solution of equation <span class="math inline">\((S\,b\,y)\,\cdot\,(S\,a\,x) = 1\)</span>. So the following intance is the result of this system of equations:</p>
<p><span class="math display">\[
\begin{aligned}
  b_0 a_0 &amp; = 1,\\
  b_0 a_1 + b_1 a_0 &amp; = 0,\\
  b_0 a_2 + b_1 a_1 + a_2 a_0 &amp; = 0,\\
  \ldots
\end{aligned}
\]</span></p>
<p>These equations can be resursively solved by moving the last term from left-side convolutions to the right side, and dividing by <span class="math inline">\((-a_0)\)</span>. Moreover the rest of terms on the left are convolutions too, then as now series <span class="math inline">\(a\)</span> convolve with the tail of series <span class="math inline">\(b\)</span>. That fact may be used for compact of definition of recursive equations:</p>
<p><span class="math display">\[
\begin{aligned}
  b_0 &amp; = \cfrac{1}{a_0},\\
  b_i &amp; = \cfrac{-1}{a_0} \sum\limits_{j = 0}^{i - 1} b_{j} a_{j + 1}.
\end{aligned}
\]</span></p>
<div class="sourceCode" id="cb9"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">Fractional</span> (<span class="dt">S</span> a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2">  recip (<span class="dt">S</span> a x) <span class="fu">=</span> fix <span class="fu">$</span> fmap (<span class="fu">/</span> (<span class="fu">-</span>a)) <span class="fu">.</span> <span class="dt">S</span> (<span class="fu">-</span><span class="dv">1</span>) <span class="fu">.</span> (<span class="fu">*</span> x)</a>
<a class="sourceLine" id="cb9-3" data-line-number="3">  fromRational x <span class="fu">=</span> <span class="dt">S</span> (fromRational x) <span class="dv">0</span></a></code></pre></div>
<p>Formulas for composition and inversion. Only series with zeroed head can be composed or reversed. Composition is handled according to Horner’s method:</p>
<p><span class="math display">\[
\begin{aligned}
  f(x) &amp;= \sum\limits_{i=0}^{\infty} a_i x^i =
           a_0 + x \sum\limits_{i=0}^{\infty} a_{i+1} x^i,\\
  g(x) &amp;= \sum\limits_{j=1}^{\infty} b_j x^j =
           x \sum\limits_{j=0}^{\infty} b_{j+1} x^j, \\
  f(g(x)) &amp;= a_0 + g(x) \sum\limits_{i=0}^{\infty} a_{i+1} g(x)^i = \\
          &amp;= a_0 + x \left(\sum\limits_{j=0}^{\infty} b_{j+1} x^j\right)
              \left(\sum\limits_{i=0}^{\infty} a_{i+1} g(x)^i\right).
\end{aligned}
\]</span></p>
<p>The product of two series can be treated recursively, so:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="ot">compose ::</span> (<span class="dt">Num</span> a, <span class="dt">Eq</span> a) <span class="ot">=&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb10-2" data-line-number="2">compose (<span class="dt">S</span> a x) (<span class="dt">S</span> <span class="dv">0</span> y) <span class="fu">=</span> <span class="dt">S</span> a (y <span class="fu">*</span> compose x (<span class="dt">S</span> <span class="dv">0</span> y))</a>
<a class="sourceLine" id="cb10-3" data-line-number="3">compose _ _ <span class="fu">=</span> error <span class="st">&quot;compose: Non-zero head&quot;</span></a></code></pre></div>
<p>Inversion can be done by the following formula:</p>
<p><span class="math display">\[
\begin{eqnarray}
  f(g(x)) &amp; = x, \\
  a_1 g(x) + a_2 g^2(x) + \ldots &amp; = x, \\
  g(x) (a_1 + a_2 g(x) + \ldots) &amp; = x, \\
  b_1 x + b_2 x^2 + \ldots &amp; = \cfrac{x}{a_1 + a_2 g(x) + \ldots}, \\
  b_1 + b_2 x + \ldots &amp; = \cfrac{1}{a_1 + a_2 g(x) + \ldots}.
\end{eqnarray}
\]</span></p>
<p>The last equality gives the recursive rule:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="ot">inverse ::</span> (<span class="dt">Fractional</span> a, <span class="dt">Eq</span> a) <span class="ot">=&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb11-2" data-line-number="2">inverse (<span class="dt">S</span> <span class="dv">0</span> x) <span class="fu">=</span> <span class="kw">let</span> y <span class="fu">=</span> <span class="dt">S</span> <span class="dv">0</span> (recip <span class="fu">$</span> compose x y) <span class="kw">in</span> y</a>
<a class="sourceLine" id="cb11-3" data-line-number="3">inverse _ <span class="fu">=</span> error <span class="st">&quot;inverse: Non-zero head&quot;</span></a></code></pre></div>
<p>According to general theory elementary special functions cannot be evaluated on the non-zero headed series. We try to handle this situaton by breaking the series into two parts: the head and the zero-headed tail.</p>
<p>The head is treated by classic functions, the tail is treated by composing argument series with classical series of elementary functions, and the combination is done by ad-hoc formulas. The first example of the ad-hoc formula:</p>
<p><span class="math display">\[
\begin{eqnarray}
  \sin \sum\limits_{i = 0}^{\infty} a_i x^i =
       \sin (a_0 + \sum\limits_{i = 1}^{\infty} a_i x^i) =
  \sin a_0 \cdot \cos \sum\limits_{i = 1}^{\infty} a_i x^i +
       \cos a_0 \cdot \sin \sum\limits_{i = 1}^{\infty} a_i x^i.
\end{eqnarray}
\]</span></p>
<p>Here <span class="math inline">\(\cos a_0\)</span> and <span class="math inline">\(\sin a_0\)</span> are sine and cosine of scalar. And the sine/cosine of zero-headed series can be calculated by composition of the argument with well-known series of sine/cosine.</p>
<p>The second example. Let’s look at the <span class="math inline">\(\arcsin\)</span>, definitions:</p>
<p><span class="math display">\[
\begin{eqnarray}
  \sum\limits_{i = 0}^{\infty} b_i x^i = \arcsin \sum\limits_{i = 0}^{\infty} a_i x^i,\\
  \sin\sum\limits_{i = 0}^{\infty} b_i x^i = \sum\limits_{i = 0}^{\infty} a_i x^i.
\end{eqnarray}
\]</span></p>
<p>And solution for an ad-hoc formula is obtained as follows (using the fact <span class="math inline">\(b_0 = \arcsin a_0\)</span>):</p>
<p><span class="math display">\[
\begin{eqnarray}
  \sin\sum\limits_{i = 1}^{\infty} b_i x^i =
    \sin\left(\sum\limits_{i = 0}^{\infty} b_i x^i - b_0 \right) = \\
  = \cos b_0 \cdot \sin\sum\limits_{i = 0}^{\infty} b_i x^i -
    \sin b_0 \cdot \cos\sum\limits_{i = 0}^{\infty} b_i x^i = \\
  = \sqrt{1 - a_0^2} \cdot \sum\limits_{i = 0}^{\infty} a_i x^i -
    a_0 \cdot \sqrt{1 - \left(\sum\limits_{i = 0}^{\infty} a_i x^i\right)^2}.
\end{eqnarray}
\]</span></p>
<p>The full formula is done by adding <span class="math inline">\(b_0\)</span>:</p>
<p><span class="math display">\[
\begin{equation}
  \sum\limits_{i = 0}^{\infty} b_i x^i =
    \arcsin a_0 + \arcsin
       \left[
       \sqrt{1 - a_0^2} \cdot
       \sum\limits_{i = 0}^{\infty} a_i x^i -
       a_0 \cdot \sqrt{1 - \left(\sum\limits_{i = 0}^{\infty} a_i x^i\right)^2}
       \right].
\end{equation}
\]</span></p>
<div class="sourceCode" id="cb12"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="kw">instance</span> (<span class="dt">Floating</span> a, <span class="dt">Eq</span> a) <span class="ot">=&gt;</span> <span class="dt">Floating</span> (<span class="dt">S</span> a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2">  pi <span class="fu">=</span> <span class="dt">S</span> pi <span class="dv">0</span></a>
<a class="sourceLine" id="cb12-3" data-line-number="3">  exp (<span class="dt">S</span> <span class="dv">0</span> x) <span class="fu">=</span> texp <span class="ot">`compose`</span> <span class="dt">S</span> <span class="dv">0</span> x</a>
<a class="sourceLine" id="cb12-4" data-line-number="4">  exp (<span class="dt">S</span> a x) <span class="fu">=</span> exp a <span class="fu">^*</span> exp (<span class="dt">S</span> <span class="dv">0</span> x)</a>
<a class="sourceLine" id="cb12-5" data-line-number="5">  log (<span class="dt">S</span> <span class="dv">0</span> x) <span class="fu">=</span> tlog <span class="ot">`compose`</span> <span class="dt">S</span> <span class="dv">0</span> x</a>
<a class="sourceLine" id="cb12-6" data-line-number="6">  log (<span class="dt">S</span> a x) <span class="fu">=</span> <span class="dt">S</span> (log a) <span class="dv">0</span> <span class="fu">+</span> log (<span class="dt">S</span> <span class="dv">0</span> <span class="fu">$</span> fmap (<span class="fu">/</span> a) x)</a>
<a class="sourceLine" id="cb12-7" data-line-number="7">  sin (<span class="dt">S</span> <span class="dv">0</span> x) <span class="fu">=</span> tsin <span class="ot">`compose`</span> <span class="dt">S</span> <span class="dv">0</span> x</a>
<a class="sourceLine" id="cb12-8" data-line-number="8">  sin (<span class="dt">S</span> a x) <span class="fu">=</span> sin a <span class="fu">^*</span> cos (<span class="dt">S</span> <span class="dv">0</span> x) <span class="fu">+</span> cos a <span class="fu">^*</span> sin (<span class="dt">S</span> <span class="dv">0</span> x)</a>
<a class="sourceLine" id="cb12-9" data-line-number="9">  cos (<span class="dt">S</span> <span class="dv">0</span> x) <span class="fu">=</span> tcos <span class="ot">`compose`</span> <span class="dt">S</span> <span class="dv">0</span> x</a>
<a class="sourceLine" id="cb12-10" data-line-number="10">  cos (<span class="dt">S</span> a x) <span class="fu">=</span> cos a <span class="fu">^*</span> cos (<span class="dt">S</span> <span class="dv">0</span> x) <span class="fu">-</span> sin a <span class="fu">^*</span> sin (<span class="dt">S</span> <span class="dv">0</span> x)</a></code></pre></div>
<p>An interesting example is sqrt, as usual we want to find <span class="math inline">\(b_n\)</span> such that:</p>
<p><span class="math display">\[ \sum\limits_{n=0}^\infty b_nx^n \cdot \sum\limits_{n=0}^\infty b_nx^n = \sum\limits_{n=0}^n a_i x^n \]</span></p>
<p>Rewrite the formula in a head-tail form, where <span class="math inline">\(y\)</span> – is a tail of b, and <span class="math inline">\(p\)</span> – is a tail of incomming series:</p>
<p><span class="math display">\[ (b_0 + x * y) (b_ 0 + x * y) = a0 + x p\]</span></p>
<p><span class="math display">\[ b_0^2 + 2 x y + x^2 y = a0 + x p\]</span></p>
<p>by grouping elements with 0 and 1 power of <span class="math inline">\(x\)</span>, we find:</p>
<p><span class="math display">\[
\begin{equation}
  \left\lbrace
  \begin{matrix}
     b_0 &amp; = \sqrt{a_0} \\
     y &amp; = \frac{p-y^2}{2 \sqrt{a_0}}
  \end{matrix}
  \right.
\end{equation}
\]</span></p>
<div class="sourceCode" id="cb13"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1">  sqrt (<span class="dt">S</span> <span class="dv">0</span> (<span class="dt">S</span> <span class="dv">0</span> x)) <span class="fu">=</span> <span class="dt">S</span> <span class="dv">0</span> (sqrt x)</a>
<a class="sourceLine" id="cb13-2" data-line-number="2">  sqrt (<span class="dt">S</span> <span class="dv">0</span> _) <span class="fu">=</span> <span class="kw">let</span> sq <span class="fu">=</span> <span class="dt">S</span> (<span class="dv">0</span> <span class="fu">/</span> <span class="dv">0</span>) sq <span class="kw">in</span> <span class="dt">S</span> <span class="dv">0</span> sq</a>
<a class="sourceLine" id="cb13-3" data-line-number="3">  sqrt (<span class="dt">S</span> a x) <span class="fu">=</span> <span class="kw">let</span> sqa <span class="fu">=</span> sqrt a</a>
<a class="sourceLine" id="cb13-4" data-line-number="4">                     sqx <span class="fu">=</span> (x <span class="fu">-</span> <span class="dt">S</span> <span class="dv">0</span> (sqx <span class="fu">*</span> sqx)) <span class="fu">/^</span> (<span class="dv">2</span> <span class="fu">*</span> sqrt a)</a>
<a class="sourceLine" id="cb13-5" data-line-number="5">                 <span class="kw">in</span> <span class="dt">S</span> sqa sqx</a>
<a class="sourceLine" id="cb13-6" data-line-number="6">  asin (<span class="dt">S</span> <span class="dv">0</span> x) <span class="fu">=</span> tasin <span class="ot">`compose`</span> <span class="dt">S</span> <span class="dv">0</span> x</a>
<a class="sourceLine" id="cb13-7" data-line-number="7">  asin (<span class="dt">S</span> a x) <span class="fu">=</span> <span class="kw">let</span> <span class="dt">S</span> _ y <span class="fu">=</span> sqrt (<span class="dv">1</span> <span class="fu">-</span> a <span class="fu">*</span> a) <span class="fu">^*</span> (<span class="dt">S</span> a x) <span class="fu">-</span></a>
<a class="sourceLine" id="cb13-8" data-line-number="8">                             a <span class="fu">^*</span> sqrt (<span class="dv">1</span> <span class="fu">-</span> (<span class="dt">S</span> a x) <span class="fu">*</span> (<span class="dt">S</span> a x))</a>
<a class="sourceLine" id="cb13-9" data-line-number="9">                 <span class="kw">in</span> <span class="dt">S</span> (asin a) <span class="dv">0</span> <span class="fu">+</span> asin (<span class="dt">S</span> <span class="dv">0</span> y)</a>
<a class="sourceLine" id="cb13-10" data-line-number="10">  acos (<span class="dt">S</span> <span class="dv">0</span> x) <span class="fu">=</span> tacos <span class="ot">`compose`</span> <span class="dt">S</span> <span class="dv">0</span> x</a>
<a class="sourceLine" id="cb13-11" data-line-number="11">  acos (<span class="dt">S</span> a x) <span class="fu">=</span> <span class="kw">let</span> <span class="dt">S</span> _ y <span class="fu">=</span> a <span class="fu">^*</span> (<span class="dt">S</span> a x) <span class="fu">-</span></a>
<a class="sourceLine" id="cb13-12" data-line-number="12">                             sqrt (<span class="dv">1</span> <span class="fu">-</span> a <span class="fu">*</span> a) <span class="fu">^*</span> sqrt (<span class="dv">1</span> <span class="fu">-</span> (<span class="dt">S</span> a x) <span class="fu">*</span> (<span class="dt">S</span> a x))</a>
<a class="sourceLine" id="cb13-13" data-line-number="13">                 <span class="kw">in</span> <span class="dt">S</span> (acos a) <span class="dv">0</span> <span class="fu">+</span> acos (<span class="dt">S</span> <span class="dv">0</span> y)</a>
<a class="sourceLine" id="cb13-14" data-line-number="14">  atan (<span class="dt">S</span> <span class="dv">0</span> x) <span class="fu">=</span> tatan <span class="ot">`compose`</span> <span class="dt">S</span> <span class="dv">0</span> x</a>
<a class="sourceLine" id="cb13-15" data-line-number="15">  atan (<span class="dt">S</span> a x) <span class="fu">=</span> <span class="kw">let</span> <span class="dt">S</span> _ y <span class="fu">=</span> <span class="dt">S</span> <span class="dv">0</span> x <span class="fu">/</span> (<span class="dv">1</span> <span class="fu">+</span> a <span class="fu">^*</span> (<span class="dt">S</span> a x))</a>
<a class="sourceLine" id="cb13-16" data-line-number="16">                 <span class="kw">in</span> <span class="dt">S</span> (atan a) <span class="dv">0</span> <span class="fu">+</span> atan (<span class="dt">S</span> <span class="dv">0</span> y)</a>
<a class="sourceLine" id="cb13-17" data-line-number="17">  sinh x <span class="fu">=</span> (exp x <span class="fu">-</span> exp (<span class="fu">-</span>x)) <span class="fu">/^</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb13-18" data-line-number="18">  cosh x <span class="fu">=</span> (exp x <span class="fu">+</span> exp (<span class="fu">-</span>x)) <span class="fu">/^</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb13-19" data-line-number="19">  asinh x <span class="fu">=</span> log (x <span class="fu">+</span> sqrt (x <span class="fu">*</span> x <span class="fu">+</span> <span class="dv">1</span>))</a>
<a class="sourceLine" id="cb13-20" data-line-number="20">  acosh x <span class="fu">=</span> undefined <span class="co">-- log (x + sqrt (x * x - 1))</span></a>
<a class="sourceLine" id="cb13-21" data-line-number="21">  atanh x <span class="fu">=</span> log ((<span class="dv">1</span> <span class="fu">+</span> x) <span class="fu">/</span> (<span class="dv">1</span> <span class="fu">-</span> x)) <span class="fu">/^</span> <span class="dv">2</span></a></code></pre></div>
<p>## Library</p>
<p>Now we can define mathematic functions on the power series. The derivative:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="ot">diff ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb14-2" data-line-number="2">diff s <span class="fu">=</span> fmap fromInteger (fromList [<span class="dv">1</span><span class="fu">..</span>]) <span class="fu">^*^</span> stail s</a></code></pre></div>
<p>And the integral:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="ot">integral ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb15-2" data-line-number="2">integral c  s <span class="fu">=</span> <span class="dt">S</span> c (s <span class="fu">^*^</span> fmap (recip<span class="fu">.</span>fromInteger) (fromList [<span class="dv">1</span><span class="fu">..</span>]) )</a></code></pre></div>
<p>### Generic functions:</p>
<p>In order to inspect a stream we can introduce a helper function:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="ot">stake ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> [a]</a>
<a class="sourceLine" id="cb16-2" data-line-number="2">stake <span class="dv">0</span> _       <span class="fu">=</span> []</a>
<a class="sourceLine" id="cb16-3" data-line-number="3">stake n (<span class="dt">S</span> a s) <span class="fu">=</span> a<span class="fu">:</span>stake (n<span class="fu">-</span><span class="dv">1</span>) s</a></code></pre></div>
<p>Here all functions will be prefixed with <code>s</code> however if you write a module for working with streams you may prefer to not add it and ask user to import module qualified.</p>
<p>Here is a function that builds a stream from the list (and the other way):</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="ot">fromList ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb17-2" data-line-number="2">fromList (x<span class="fu">:</span>xs) <span class="fu">=</span> <span class="dt">S</span> x (fromList xs) <span class="co">-- works only on infinite list</span></a>
<a class="sourceLine" id="cb17-3" data-line-number="3"></a>
<a class="sourceLine" id="cb17-4" data-line-number="4"><span class="ot">fromListNum ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb17-5" data-line-number="5">fromListNum [] <span class="fu">=</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb17-6" data-line-number="6">fromListNum (x<span class="fu">:</span>xs) <span class="fu">=</span> <span class="dt">S</span> x (fromListNum xs)</a>
<a class="sourceLine" id="cb17-7" data-line-number="7"></a>
<a class="sourceLine" id="cb17-8" data-line-number="8"><span class="ot">toList ::</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> [a]</a>
<a class="sourceLine" id="cb17-9" data-line-number="9">toList (<span class="dt">S</span> x xs) <span class="fu">=</span> x <span class="fu">:</span> toList xs</a></code></pre></div>
<p>In order to write an usefull functions and series we will introduce a folding:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="ot">sscan ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> b <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb18-2" data-line-number="2">sscan f i (<span class="dt">S</span> x s) <span class="fu">=</span></a>
<a class="sourceLine" id="cb18-3" data-line-number="3"> <span class="kw">let</span> k <span class="fu">=</span> f i x</a>
<a class="sourceLine" id="cb18-4" data-line-number="4"> <span class="kw">in</span> <span class="dt">S</span> k (sscan f k s)</a></code></pre></div>
<p>Now lets introduce few functions using <code>sfold</code>. A function that will generate a sum of the Stream, i.e. having a stream <code>ssum &lt;a0:a1:a2:..&gt; = &lt;a0:a0+a1:a0+a1+a2:...&gt;</code></p>
<div class="sourceCode" id="cb19"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="ot">ssum ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb19-2" data-line-number="2">ssum <span class="fu">=</span> sscan (<span class="fu">+</span>) <span class="dv">0</span></a></code></pre></div>
<p>Build a stream by iterating a function</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" data-line-number="1"><span class="ot">siterate ::</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb20-2" data-line-number="2">siterate f x <span class="fu">=</span> <span class="dt">S</span> x (siterate f (f x))</a></code></pre></div>
<p>Build a serie of powers: <span class="math inline">\(&lt;x,x^2,x^3,...&gt;\)</span></p>
<div class="sourceCode" id="cb21"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" data-line-number="1">spower x <span class="fu">=</span> <span class="dt">S</span> <span class="dv">1</span> (siterate (<span class="fu">*</span>x) x)</a></code></pre></div>
<p>Unfold</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb22-1" data-line-number="1"><span class="ot">sunfold ::</span> (c <span class="ot">-&gt;</span> (c,a)) <span class="ot">-&gt;</span> c <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb22-2" data-line-number="2">sunfold f k <span class="fu">=</span> <span class="kw">let</span> (k&#39;,a) <span class="fu">=</span> f k <span class="kw">in</span> <span class="dt">S</span> a (sunfold f k&#39;)</a></code></pre></div>
<p>Because we want to implement a teylor serie we want to have a serie of factorials</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb23-1" data-line-number="1"><span class="ot">sfac ::</span> (<span class="dt">Enum</span> a, <span class="dt">Num</span> a) <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb23-2" data-line-number="2">sfac <span class="fu">=</span> sscan (<span class="fu">*</span>) <span class="dv">1</span> (fromList [<span class="dv">1</span><span class="fu">..</span>]) </a></code></pre></div>
<p>And now 1/factorials</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb24-1" data-line-number="1"><span class="ot">sdfac ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb24-2" data-line-number="2">sdfac <span class="fu">=</span> fmap (\x <span class="ot">-&gt;</span> <span class="dv">1</span> <span class="fu">/</span> (fromIntegral x)) sfac</a></code></pre></div>
<div class="sourceCode" id="cb25"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb25-1" data-line-number="1"><span class="ot">szipWith ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> b <span class="ot">-&gt;</span> <span class="dt">S</span> c</a>
<a class="sourceLine" id="cb25-2" data-line-number="2">szipWith f (<span class="dt">S</span> a x) (<span class="dt">S</span> b y) <span class="fu">=</span> <span class="dt">S</span> (f a b) (szipWith f x y)</a></code></pre></div>
<p>This is an actual building of the Taylor serie:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb26-1" data-line-number="1"><span class="ot">build ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb26-2" data-line-number="2">build t s <span class="fu">=</span> ssum <span class="fu">$</span> spower t <span class="fu">^*^</span> s</a></code></pre></div>
<div class="sourceCode" id="cb27"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb27-1" data-line-number="1"><span class="ot">shead ::</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb27-2" data-line-number="2">shead (<span class="dt">S</span> a s) <span class="fu">=</span> a</a></code></pre></div>
<div class="sourceCode" id="cb28"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb28-1" data-line-number="1"><span class="ot">stail ::</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb28-2" data-line-number="2">stail (<span class="dt">S</span> a s) <span class="fu">=</span> s</a></code></pre></div>
<div class="sourceCode" id="cb29"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb29-1" data-line-number="1"><span class="ot">sdropWhile ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb29-2" data-line-number="2">sdropWhile p s<span class="fu">@</span>(<span class="dt">S</span> a xs)</a>
<a class="sourceLine" id="cb29-3" data-line-number="3">  <span class="fu">|</span> p a <span class="fu">=</span> sdropWhile p xs</a>
<a class="sourceLine" id="cb29-4" data-line-number="4">  <span class="fu">|</span> otherwise <span class="fu">=</span> s</a></code></pre></div>
<div class="sourceCode" id="cb30"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb30-1" data-line-number="1"><span class="ot">eps ::</span> (<span class="dt">Ord</span> a, <span class="dt">Num</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">S</span> a <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb30-2" data-line-number="2">eps e s <span class="fu">=</span> snd <span class="fu">.</span> shead <span class="fu">.</span> sdropWhile (\(x,y) <span class="ot">-&gt;</span> abs (x <span class="fu">-</span> y) <span class="fu">&gt;=</span> e)</a>
<a class="sourceLine" id="cb30-3" data-line-number="3">        <span class="fu">$</span> szipWith (,) s (stail s)</a></code></pre></div>
<p>## Taylor series for some analytic functions</p>
<p>Here we defined examples for the functions with analytically known series at 0.</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb31-1" data-line-number="1"><span class="ot">texp ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb31-2" data-line-number="2">texp <span class="fu">=</span> <span class="dt">S</span> <span class="dv">1</span> sdfac</a></code></pre></div>
<div class="sourceCode" id="cb32"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb32-1" data-line-number="1"><span class="ot">tlog ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb32-2" data-line-number="2">tlog <span class="fu">=</span> <span class="kw">let</span> go n s <span class="fu">=</span> <span class="dt">S</span> (s <span class="fu">/</span> n) (go (n <span class="fu">+</span> <span class="dv">1</span>) (<span class="fu">-</span>s))</a>
<a class="sourceLine" id="cb32-3" data-line-number="3">       <span class="kw">in</span> <span class="dt">S</span> <span class="dv">0</span> (go <span class="dv">1</span> <span class="dv">1</span>)</a></code></pre></div>
<div class="sourceCode" id="cb33"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb33-1" data-line-number="1"><span class="ot">tsin ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb33-2" data-line-number="2">tsin <span class="fu">=</span> <span class="kw">let</span> s <span class="fu">=</span> <span class="dt">S</span> <span class="dv">0</span> <span class="fu">.</span> <span class="dt">S</span> <span class="dv">1</span> <span class="fu">.</span> <span class="dt">S</span> <span class="dv">0</span> <span class="fu">.</span> <span class="dt">S</span> (<span class="fu">-</span><span class="dv">1</span>) <span class="fu">$</span> s</a>
<a class="sourceLine" id="cb33-3" data-line-number="3">       <span class="kw">in</span> s <span class="fu">^*^</span> texp</a></code></pre></div>
<div class="sourceCode" id="cb34"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb34-1" data-line-number="1"><span class="ot">tcos ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb34-2" data-line-number="2">tcos <span class="fu">=</span> <span class="kw">let</span> s <span class="fu">=</span> <span class="dt">S</span> <span class="dv">1</span> <span class="fu">.</span> <span class="dt">S</span> <span class="dv">0</span> <span class="fu">.</span> <span class="dt">S</span> (<span class="fu">-</span><span class="dv">1</span>) <span class="fu">.</span> <span class="dt">S</span> <span class="dv">0</span> <span class="fu">$</span> s</a>
<a class="sourceLine" id="cb34-3" data-line-number="3">       <span class="kw">in</span> s <span class="fu">^*^</span> texp</a></code></pre></div>
<div class="sourceCode" id="cb35"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb35-1" data-line-number="1"><span class="ot">tasin ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb35-2" data-line-number="2">tasin <span class="fu">=</span> <span class="kw">let</span> go n <span class="fu">=</span> <span class="dt">S</span> (<span class="dv">1</span> <span class="fu">/</span> n) (fmap (<span class="fu">*</span> (n <span class="fu">/</span> (n <span class="fu">+</span> <span class="dv">1</span>))) <span class="fu">.</span> <span class="dt">S</span> <span class="dv">0</span> <span class="fu">$</span> go (n <span class="fu">+</span> <span class="dv">2</span>))</a>
<a class="sourceLine" id="cb35-3" data-line-number="3">        <span class="kw">in</span> <span class="dt">S</span> <span class="dv">0</span> (go <span class="dv">1</span>)</a></code></pre></div>
<div class="sourceCode" id="cb36"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb36-1" data-line-number="1"><span class="ot">tacos ::</span> (<span class="dt">Eq</span> a, <span class="dt">Floating</span> a) <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb36-2" data-line-number="2">tacos <span class="fu">=</span> pi <span class="fu">/</span> <span class="dv">2</span> <span class="fu">-</span> tasin</a></code></pre></div>
<div class="sourceCode" id="cb37"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb37-1" data-line-number="1"><span class="ot">tatan ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb37-2" data-line-number="2">tatan <span class="fu">=</span> <span class="kw">let</span> go s n <span class="fu">=</span> <span class="dt">S</span> (s <span class="fu">/</span> n) <span class="fu">.</span> <span class="dt">S</span> <span class="dv">0</span> <span class="fu">$</span> go (<span class="fu">-</span>s) (n <span class="fu">+</span> <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb37-3" data-line-number="3">        <span class="kw">in</span> <span class="dt">S</span> <span class="dv">0</span> <span class="fu">$</span> go <span class="dv">1</span> <span class="dv">1</span></a></code></pre></div>
<div class="sourceCode" id="cb38"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb38-1" data-line-number="1"><span class="ot">tsinh ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb38-2" data-line-number="2">tsinh <span class="fu">=</span> <span class="kw">let</span> s <span class="fu">=</span> <span class="dt">S</span> <span class="dv">0</span> <span class="fu">.</span> <span class="dt">S</span> <span class="dv">1</span> <span class="fu">.</span> <span class="dt">S</span> <span class="dv">0</span> <span class="fu">.</span> <span class="dt">S</span> <span class="dv">1</span> <span class="fu">$</span> s</a>
<a class="sourceLine" id="cb38-3" data-line-number="3">        <span class="kw">in</span> s <span class="fu">^*^</span> texp</a></code></pre></div>
<div class="sourceCode" id="cb39"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb39-1" data-line-number="1"><span class="ot">tcosh ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb39-2" data-line-number="2">tcosh <span class="fu">=</span> <span class="kw">let</span> s <span class="fu">=</span> <span class="dt">S</span> <span class="dv">1</span> <span class="fu">.</span> <span class="dt">S</span> <span class="dv">0</span> <span class="fu">.</span> <span class="dt">S</span> <span class="dv">1</span> <span class="fu">.</span> <span class="dt">S</span> <span class="dv">0</span> <span class="fu">$</span> s</a>
<a class="sourceLine" id="cb39-3" data-line-number="3">        <span class="kw">in</span> s <span class="fu">^*^</span> texp</a></code></pre></div>
<div class="sourceCode" id="cb40"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb40-1" data-line-number="1"><span class="ot">tasinh ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb40-2" data-line-number="2">tasinh <span class="fu">=</span> <span class="kw">let</span> go s n <span class="fu">=</span> <span class="dt">S</span> (s <span class="fu">/</span> n) (fmap (<span class="fu">*</span> (n <span class="fu">/</span> (n <span class="fu">+</span> <span class="dv">1</span>))) <span class="fu">.</span> <span class="dt">S</span> <span class="dv">0</span> <span class="fu">$</span> go (<span class="fu">-</span>s) (n <span class="fu">+</span> <span class="dv">2</span>))</a>
<a class="sourceLine" id="cb40-3" data-line-number="3">         <span class="kw">in</span> <span class="dt">S</span> <span class="dv">0</span> (go <span class="dv">1</span> <span class="dv">1</span>)</a></code></pre></div>
<div class="sourceCode" id="cb41"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb41-1" data-line-number="1"><span class="ot">tacosh ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb41-2" data-line-number="2">tacosh <span class="fu">=</span> undefined</a></code></pre></div>
<div class="sourceCode" id="cb42"><pre class="sourceCode literate haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb42-1" data-line-number="1"><span class="ot">tatanh ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> <span class="dt">S</span> a</a>
<a class="sourceLine" id="cb42-2" data-line-number="2">tatanh <span class="fu">=</span> <span class="kw">let</span> go n <span class="fu">=</span> <span class="dt">S</span> (recip n) <span class="fu">.</span> <span class="dt">S</span> <span class="dv">0</span> <span class="fu">$</span> go (n <span class="fu">+</span> <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb42-3" data-line-number="3">         <span class="kw">in</span> <span class="dt">S</span> <span class="dv">0</span> (go <span class="dv">1</span>)</a></code></pre></div>
<p>## TODO</p>
<p>Some things were not covered in this file, taylor series were not statically protected agains calling actions on the series build at the different points, so we assume that every Taylor serie is built at <span class="math inline">\(0\)</span>.</p>
<p>Not all functions from the Floating instance were implemented.</p>
<p>It’s possible to generalize <span class="math inline">\(asin/sin\)</span> approach for a wider class of functions, but it was not done yet.</p>]]></summary>
</entry>
<entry>
    <title>Playing with types: type level numbers</title>
    <link href="https://qnikst.github.io/posts/2014-08-07-playing-with-types.html" />
    <id>https://qnikst.github.io/posts/2014-08-07-playing-with-types.html</id>
    <published>2013-12-30T00:00:00Z</published>
    <updated>2013-12-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<blockquote>
<p>As always I’m terribly sorry for my bad english, but writing the posts and having a feedback is the only reasonable way to improve it.</p>
</blockquote>
<p>This post describes an easy exercise that gives a feeling of use typelevel numbers. This post is a part of another work that hopefully will be covered in following posts.</p>
<p>If you want to know more about typelevel literals and friends you can take a look at the <a href="http://ponies.io/posts/2014-07-30-typelits.html">following post</a> it describes the theory much better than I can.</p>
<p>Intead of using type level Strings we will address numbers. In this post I want to create a datatype that will contain a number that is known <em>statically</em> (at compilation time) and which can be extracted from type at <em>runtime</em>.</p>
<p>The first part of the problem (having a number) in a type may be interesting if you want to distiguish types assosiated with different numbers.</p>
<p>For simplicity we will take <a href="https://hackage.haskell.org/package/tagged-0.7.2/docs/Data-Tagged.html">Data.Tagged.Tagged</a> type from <code>tagged</code> package. However it’s possible to create our own type as I did at the beggining (just I did a first time).</p>
<p>We add helper methods that allow us to extract infomation about the type-parameter from the value:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="ot">toProxy ::</span> <span class="dt">Tagged</span> n a  <span class="ot">-&gt;</span> <span class="dt">Proxy</span> n</a>
<a class="sourceLine" id="cb1-2" data-line-number="2">toProxy _ <span class="fu">=</span> <span class="dt">Proxy</span></a></code></pre></div>
<p>And add a constrictor helper that allow to create a type with information about number that is provided by us.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="ot">mkT ::</span> proxy n <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Tagged</span> n a</a>
<a class="sourceLine" id="cb2-2" data-line-number="2">mkT _ a <span class="fu">=</span> <span class="dt">Tagged</span> a</a></code></pre></div>
<p>Just check that we can create a fancy values:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">:</span>t mkT (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Nothing</span>) <span class="dv">8</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">mkT (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Nothing</span>) <span class="dv">8</span><span class="ot"> ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">Tagged</span> <span class="ch">&#39;Nothing a</span></a></code></pre></div>
<h1 id="naturals">Naturals</h1>
<p>From this point we can start real fun. At first lest create a value with natural type parameter:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">:</span>t mkT (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dv">3</span>) <span class="dv">8</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">mkT (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dv">3</span>) <span class="dv">8</span><span class="ot"> ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">Tagged</span> <span class="dv">3</span> a</a></code></pre></div>
<p>Now we want to be able to use this information at runtime. Let’s introduce a new method that will use <code>natVal</code> function:</p>
<pre class="haskel"><code>natVal :: forall n proxy. KnownNat n =&gt; proxy n -&gt; Integer` </code></pre>
<p>take a type that acts as a type proxy and returns the integer assosiated with a type.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="ot">useT ::</span> (<span class="dt">KnownNat</span> n, <span class="dt">Num</span> a) <span class="ot">=&gt;</span> <span class="dt">Tagged</span> n a <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb6-2" data-line-number="2">useT t<span class="fu">@</span>(<span class="dt">Tagged</span> a) <span class="fu">=</span> fromIntegral (natVal (toProxy t)) <span class="fu">+</span> a</a></code></pre></div>
<p>Here we are:</p>
<ol type="1">
<li><p>extracting type information by calling <code>toProxy</code></p></li>
<li><p>extracting natural number from a proxy by calling <code>natVal</code></p></li>
<li><p>returning a calculated results</p></li>
</ol>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> useT <span class="fu">$</span> mkT (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dv">3</span>) <span class="dv">8</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2"><span class="dv">11</span></a></code></pre></div>
<h1 id="positive-rational">Positive rational</h1>
<p>On the next step we will introduce a code that works for natural numbers, by definition rational number is <code>a % b</code>, where <code>a \in Z</code> and <code>b \in N</code>. Lets lift this information to a type level by introducing a typelevel rational:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="kw">data</span> (<span class="fu">:%%</span>) a b</a></code></pre></div>
<p>And introduce type extraction mechanisms</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="co">-- | extract numerator type</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2">numerator<span class="ot"> ::</span> proxy (n <span class="fu">:%%</span> m) <span class="ot">-&gt;</span> <span class="dt">Proxy</span> n</a>
<a class="sourceLine" id="cb9-3" data-line-number="3">numerator _ <span class="fu">=</span> <span class="dt">Proxy</span></a>
<a class="sourceLine" id="cb9-4" data-line-number="4"></a>
<a class="sourceLine" id="cb9-5" data-line-number="5"><span class="co">-- | Extract denomenator type </span></a>
<a class="sourceLine" id="cb9-6" data-line-number="6"><span class="ot">denomenator ::</span> proxy (n <span class="fu">:%%</span> m)  <span class="ot">-&gt;</span> <span class="dt">Proxy</span> m</a>
<a class="sourceLine" id="cb9-7" data-line-number="7">denomenator _ <span class="fu">=</span> <span class="dt">Proxy</span></a></code></pre></div>
<p>Today we don’t conver math operations over the type-parameters, this may be a topic for another post. So now we may be quite happy as we can create values tagged by something that looks like a rational number.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> <span class="fu">:</span>t mkT (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dv">3</span> <span class="fu">:%%</span> <span class="dv">8</span>)) <span class="dv">8</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">mkT (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dv">3</span> <span class="fu">:%%</span> <span class="dv">8</span>)) <span class="dv">8</span><span class="ot"> ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">Tagged</span> (<span class="dv">3</span> <span class="fu">:%%</span> <span class="dv">8</span>) a</a></code></pre></div>
<p>Now we can write a function that will use information about the type at runtime:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="ot">useTF ::</span> (<span class="dt">KnownNat</span> n, <span class="dt">KnownNat</span> m, <span class="dt">Fractional</span> a) <span class="ot">=&gt;</span> <span class="dt">Tagged</span> (n <span class="fu">:%%</span> m) a <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb11-2" data-line-number="2">useTF t<span class="fu">@</span>(<span class="dt">Tagged</span> a) <span class="fu">=</span> v <span class="fu">+</span> a</a>
<a class="sourceLine" id="cb11-3" data-line-number="3">  <span class="kw">where</span> v <span class="fu">=</span> fromRational <span class="fu">$</span></a>
<a class="sourceLine" id="cb11-4" data-line-number="4">               natVal (numerator <span class="fu">$</span> toProxy t) <span class="fu">:%</span> natVal (denomenator <span class="fu">$</span> toProxy t)</a></code></pre></div>
<p>Lets check:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="fu">*</span><span class="dt">Main</span><span class="fu">&gt;</span> useTF <span class="fu">$</span> mkT (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dv">3</span> <span class="fu">:%%</span> <span class="dv">8</span>)) <span class="dv">8</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2"><span class="fl">8.375</span></a></code></pre></div>
<h1 id="positive-real.">Positive real.</h1>
<p>Now we want to solve the following problem: it’s not easy to write types for ratio, the reason that for a complex cases we need somehow to find the ratio that fits. Also we want to support real numbers. Having in mind the fact that real values are not supported on the typelevel, we may be quite happy with Rational approximation.</p>
<p>In order to solve those 2 problems we need:</p>
<ol type="1">
<li><p>real values support</p></li>
<li><p>ability to write code easily</p></li>
</ol>
<p>We will introduce a TH function that will find a good approximation and create required type:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="ot">mkFloatProxy ::</span> <span class="dt">RealFrac</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Q</span> <span class="dt">Exp</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2">mkFloatProxy x <span class="fu">=</span> [<span class="fu">|</span> <span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="fu">$</span>(nk a) <span class="fu">:%%</span> <span class="fu">$</span>(nk b)) <span class="fu">|</span>]</a>
<a class="sourceLine" id="cb13-3" data-line-number="3">  <span class="kw">where</span> (a <span class="fu">:%</span> b) <span class="fu">=</span> toRational x</a>
<a class="sourceLine" id="cb13-4" data-line-number="4">          nk x <span class="fu">=</span> sigT (litT (numTyLit x)) (<span class="dt">ConT</span> <span class="fu">$</span> mkName <span class="st">&quot;Nat&quot;</span>)</a></code></pre></div>
<p>the magic that we have in <code>nk x</code> we need to create a type parameter of kind <code>Nat</code>. Now we can write a code like:</p>
<blockquote>
<p>test = mkT $(mkFloatProxy pi) 7.0</p>
</blockquote>
<p>This is quite nice, next steps may be support of negative values, using SomeNat and operations on values.</p>]]></summary>
</entry>

</feed>

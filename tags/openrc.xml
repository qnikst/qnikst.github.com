<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Qnikst blog RSS feed - Post tagged openrc</title>
    <link href="https://qnikst.github.io/tags/openrc.xml" rel="self" />
    <link href="https://qnikst.github.io" />
    <id>https://qnikst.github.io/tags/openrc.xml</id>
    <author>
        <name>Alexander Vershilov</name>
        <email>alexander.vershilov@gmail.com</email>
    </author>
    <updated>2013-11-06T00:00:00Z</updated>
    <entry>
    <title>Supervision inside OpenRC</title>
    <link href="https://qnikst.github.io/posts/2013-11-06-openrc-supervision.html" />
    <id>https://qnikst.github.io/posts/2013-11-06-openrc-supervision.html</id>
    <published>2013-11-06T00:00:00Z</published>
    <updated>2013-11-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>The role of the supervision in the init systems becomes crucial. And many administrators wants some kind of s-vision support from the scratch. Here are some thoughts about this problem and a way how things will be solved inside OpenRC.</p>
<p><small>(As always I’m sorry for my english and maybe problems in technitial details, so any feedback is apprecated</small></p>
<h1 id="the-problem.">The problem.</h1>
<p>The idea of supervision is to take care about running processes and restart them in the case if they fail. It’s interesting to say that ‘fail’ may mean different things:</p>
<ol type="1">
<li>Process exited (with non zero EXIT_CODE);</li>
<li>Process fail to work as expected.</li>
</ol>
<p>In the most systems only first meaning is addressed, however it’s not very carefull and in systems where <em>reliance</em> is required we need to use additional tools to support 2.</p>
<p>Another set of problem is about how we will decide if we want to restart service and run cleanup actions. And this problem is not easy at all, i.e. we may want to stop restarting service if it fails constantly, or increase timeout in restarts and so on.</p>
<p>Also we may want additional features like say, remote access/control to supervised services, additinal notification.</p>
<p>And it’s clear that it’s insane to support all required tools inside one service management package, and there the solution will be: ‘give a user possibility to delegate supervision problem to the standalone application’.</p>
<p>So the solution would be the following:</p>
<ol type="1">
<li>Let OpenRC know that user may want s-vision for some services and what module he want to use;</li>
<li>Provide a set of existing modules;</li>
<li>Give an ability to create new modules.</li>
</ol>
<h1 id="monit">Monit</h1>
<p>I’ve started to work on ‘monit’ approach. Monit (http://mmonit.com/monit/) is a monitoring that allowes user to monitor services and give much possibilites for their control. This tool provides a special language that describes how each service should be monitored started and restarted.</p>
<p>Currently it’s possible to run monit as a standalone daemon and then control supervision via monit itself by calling <code>monit foo start</code>/<code>monit foo stop</code>. However having OpenRC as a common point for services control is a good idea.</p>
<p>All the code available on s-vision branch (https://github.com/qnikst/openrc/compare/s-vision) and will be merged to mainline after some discussion with other developers and administrators that have a good experience with running monit.</p>
<p>In order to put service under monit control one need:</p>
<ol type="1">
<li><p>Run monit under inittab control (or other low level s-vision subsystem). This can be done by adding:</p>
<p>MO:2345:respawn:/usr/bin/monit -Ic /etc/monitrc</p></li>
</ol>
<p>to inittab</p>
<ol start="2" type="1">
<li><p>Add temporary config path under monit control (/etc/monitrc)</p>
<p>INCLUDE /run/openrc-monit/*</p></li>
<li><p>Create control file for service under <code>/etc/conf.d/monit-files/servicename</code></p></li>
<li><p>Add s-vision module to conf.d file, i.e.</p>
<p>rc_supervise_module=“monit” rc_monit_type=“file”</p></li>
</ol>
<p>When you will trigger service start it will check that it is supervised, copy all related files to the temporary config path, and then call <code>monit start service</code>, that will trigger file once again, but init will understand that it is monitored, and start service as usual.</p>
<p><span class="label label-warning"> Update: </span> the idea is just to hook up into <code>start_post</code> all call <code>monit restart</code> and <code>monit monitor</code> from there.</p>
<h1 id="future-work">Future work</h1>
<p>There are a couple of work to be done before merging:</p>
<ol type="1">
<li><p>Introduce other <code>monit_types</code> like:</p>
<ul>
<li>simple - where basic control file generated automatically on the fly</li>
<li>native - where existing configuration can be reused.</li>
</ul></li>
<li><p>Understand if it possible to run runscript only once</p></li>
<li><p>Cleanup code</p></li>
<li><p>Export general API that other s-vision subsystems can use</p></li>
</ol>
<p>All comments are welcome</p>]]></summary>
</entry>

</feed>

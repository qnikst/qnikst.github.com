<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Qnikst blog RSS feed - Post tagged tips</title>
    <link href="https://qnikst.github.io/tags/tips.xml" rel="self" />
    <link href="https://qnikst.github.io" />
    <id>https://qnikst.github.io/tags/tips.xml</id>
    <author>
        <name>Alexander Vershilov</name>
        <email>alexander.vershilov@gmail.com</email>
    </author>
    <updated>2015-04-30T00:00:00Z</updated>
    <entry>
    <title>Logging all exceptions in ghci</title>
    <link href="https://qnikst.github.io/posts/2015-04-30-grabbing-exceptions.html" />
    <id>https://qnikst.github.io/posts/2015-04-30-grabbing-exceptions.html</id>
    <published>2015-04-30T00:00:00Z</published>
    <updated>2015-04-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>On one resource there was a question how to log all exception in GHCI. There was a use case where user could start a background processes and some exceptions could be lost.</p>
<p>In a normal program you can use <code>-prof</code> compilation option and run program with <code>+RTS -xc</code> in order to get exceptions messages and stack-traces logged. However I assume that most of the ghc users doesnâ€™t have <code>ghc</code> compiled with profiling flags. So we need to find another option.</p>
<p>And there is a solution. Every forked thread installs a exceptions handler:</p>
<p>From <a href="https://hackage.haskell.org/package/base-4.8.0.0/docs/src/GHC-Conc-Sync.html#forkIO">GHC.Cons.Sym</a></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">forkIO ::</span> <span class="dt">IO</span> () <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">ThreadId</span>
forkIO action <span class="fu">=</span> <span class="dt">IO</span> <span class="fu">$</span> \ s <span class="ot">-&gt;</span>
   <span class="kw">case</span> (fork<span class="fu">#</span> action_plus s) <span class="kw">of</span> (<span class="fu">#</span> s1, tid <span class="fu">#</span>) <span class="ot">-&gt;</span> (<span class="fu">#</span> s1, <span class="dt">ThreadId</span> tid <span class="fu">#</span>)
    <span class="kw">where</span>
      action_plus <span class="fu">=</span> catchException action childHandler</code></pre></div>
<p>From <a href="">GHC.IO</a></p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="co">{-</span>
<span class="co">catchException used to handle the passing around of the state to the</span>
<span class="co">action and the handler.  This turned out to be a bad idea - it meant</span>
<span class="co">that we had to wrap both arguments in thunks so they could be entered</span>
<span class="co">as normal (remember IO returns an unboxed pair...).</span>

<span class="co">Now catch# has type</span>

<span class="co">catch# :: IO a -&gt; (b -&gt; IO a) -&gt; IO a</span>

<span class="co">(well almost; the compiler doesn&#39;t know about the IO newtype so we</span>
<span class="co">have to work around that in the definition of catchException below).</span>
<span class="co">-}</span>
<span class="ot">catchException ::</span> <span class="dt">Exception</span> e <span class="ot">=&gt;</span> <span class="dt">IO</span> a <span class="ot">-&gt;</span> (e <span class="ot">-&gt;</span> <span class="dt">IO</span> a) <span class="ot">-&gt;</span> <span class="dt">IO</span> a</code></pre></div>
<p>In order to set hander we can use:</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="ot">setUncaughtExceptionHandler ::</span> (<span class="dt">SomeException</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()) <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</code></pre></div>
<p>In order to add something to ghci we can load a script by passing it with <code>-ghci-script</code> option</p>
<div class="sourceCode"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span class="fu">:</span>m <span class="dt">GHC.Conc.Sync</span> <span class="dt">Control.Exception</span>

<span class="fu">:</span>{
<span class="kw">let</span><span class="ot"> uncaughtExceptionHandler ::</span> <span class="dt">SomeException</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()
    uncaughtExceptionHandler e <span class="fu">=</span> <span class="kw">do</span>
        putStrLn <span class="fu">$</span> <span class="st">&quot;Unhandled exception: &quot;</span> <span class="fu">++</span> show e
<span class="fu">:</span>}

setUncaughtExceptionHandler uncaughtExceptionHandler

<span class="fu">:</span>m <span class="fu">-</span><span class="dt">GHC.Conc.Sync</span> <span class="dt">Control.Exception</span></code></pre></div>
<p>And load it with <code>ghci -ghci-script script.hs</code>.</p>
<pre><code>qnikst@localhost ~ $ ghci -ghci-script script.hs 
GHCi, version 7.8.4: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude&gt; :m +Control.Exception Control.Concurrent
Prelude Control.Exception Control.Concurrent&gt; forkIO $ threadDelay 10000 &gt;&gt; error &quot;yo!&quot;
ThreadId 28
Prelude Control.Exception Control.Concurrent&gt; Unhandled exception: yo!</code></pre>]]></summary>
</entry>

</feed>

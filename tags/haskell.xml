<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Qnikst blog RSS feed - Post tagged haskell</title>
    <link href="http://qnikst.github.com/tags/haskell.xml" rel="self" />
    <link href="http://qnikst.github.com" />
    <id>http://qnikst.github.com/tags/haskell.xml</id>
    <author>
        <name>Alexander Vershilov</name>
        <email>alexander.vershilov@gmail.com</email>
    </author>
    <updated>2013-01-19T00:00:00Z</updated>
    <entry>
    <title>announcing imagemagick-hs</title>
    <link href="http://qnikst.github.com/posts/2013-01-19-announcing-imagemagick.html" />
    <id>http://qnikst.github.com/posts/2013-01-19-announcing-imagemagick.html</id>
    <published>2013-01-19T00:00:00Z</published>
    <updated>2013-01-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I’m happy to announce new <a href="http://hackage.haskell.org/package/imagemagick">haskell binding library to imagemagick</a>.</p>
<p>This library is similar to some other bindings. It has some good points:</p>
<ol style="list-style-type: decimal">
<li><p>it has friendly and helpfull maintainers, that willing to help it’s users</p></li>
<li><p>it’s as safe as possible [1]</p></li>
<li><p>it has basics for functional interfaces</p></li>
<li><p>it has MagickWand interface</p></li>
<li><p>it has built-in examples</p></li>
</ol>
<p>But not everything is good:</p>
<ol style="list-style-type: decimal">
<li><p>we have not ported all API. Really it’s not a problem once you can reqyest adding new functionallity or fix pull-request it =).</p></li>
<li><p>it has known bugs and most of them related to imagemagick itself. I’m ready to investigate further if you will have problems with it.</p></li>
<li><p>it has no haddock documentation. Sorry.. I always had troubles with documentation</p></li>
<li><p>it uses modern version of imagemagick so it may lack some enum definitions. I’d like to find a safe way to use only defined enum values.</p></li>
</ol>
<p>About status and future of library:</p>
<p>I had some cool plans for this bindings such as make full imagemagick API support and provide a functional/declarative inteface but unfortunatelly I have no time for this library. So all functionality will be added on demand, i.e. if you lack some features feel free to request it or pull-request.</p>
<p>[1] library using resourcet for controlling external resources lifetime and scope, it’s not as safe as it could be possible with regions but unlucky regions regions are not working with recent GHC.</p>]]></summary>
</entry>
<entry>
    <title>Playing with trees: prefix map</title>
    <link href="http://qnikst.github.com/posts/2013-01-01-playing-with-trees-one.html" />
    <id>http://qnikst.github.com/posts/2013-01-01-playing-with-trees-one.html</id>
    <published>2013-01-01T00:00:00Z</published>
    <updated>2013-01-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>We introduce a binary tree like data structure with next structure.</p>
<pre class="sourceCode literate haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="ot">{-# LANGUAGE OverloadedStrings, ScopedTypeVariables #-}</span>
<span class="fu">&gt;</span> 
<span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Prelude</span> <span class="kw">hiding</span> (<span class="fu">head</span>, <span class="fu">length</span>, <span class="fu">drop</span>, <span class="fu">take</span>, <span class="fu">lookup</span>, <span class="fu">null</span>)
<span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Data.Function</span>
<span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Data.ByteString.Char8</span> <span class="kw">hiding</span> (empty)
<span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Test.QuickCheck</span>
<span class="fu">&gt;</span> 
<span class="fu">&gt;</span> <span class="co">--        [Node (current value) l v r eq]</span>
<span class="fu">&gt;</span> <span class="co">--                              | | |  +------------------------------------+</span>
<span class="fu">&gt;</span> <span class="co">--        +---------------------+ | +------------------+                    |</span>
<span class="fu">&gt;</span> <span class="co">--        |                       |                    |                    |</span>
<span class="fu">&gt;</span> <span class="co">--        +                       |                    +                    |</span>
<span class="fu">&gt;</span> <span class="co">--  element less            value or nothing        elements that        elements that</span>
<span class="fu">&gt;</span> <span class="co">--  than current            if it intermideate      are more then        have &lt;current value&gt;</span>
<span class="fu">&gt;</span> <span class="co">--                              node                current              as prefix</span>
<span class="fu">&gt;</span> <span class="co">-- </span></code></pre>
<p>Top level item represent empty value and can have a value.</p>
<pre class="sourceCode literate haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="kw">type</span> <span class="dt">PrefixMap</span> a <span class="fu">=</span> (<span class="dt">Maybe</span> a, <span class="dt">PMap</span> a)</code></pre>
<p>Inner tree is either an empty value or node, that has left/right children and maybe can have a value and next element</p>
<pre class="sourceCode literate haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> <span class="kw">data</span> <span class="dt">PMap</span>  a <span class="fu">=</span> <span class="dt">E</span>
<span class="fu">&gt;</span>              <span class="fu">|</span> <span class="dt">N</span> <span class="dt">ByteString</span> (<span class="dt">PMap</span> a) (<span class="dt">Maybe</span> a) (<span class="dt">PMap</span> a) (<span class="dt">PMap</span> a)
<span class="fu">&gt;</span>              <span class="co">{-   current    less      value        more    eq   -}</span>
<span class="fu">&gt;</span>              <span class="kw">deriving</span> (<span class="kw">Show</span>)</code></pre>
<p>Having PrefixMap as a additional layer we can assume, that we have a non-null prefix on each level.</p>
<p>Introduce simple builders</p>
<pre class="sourceCode literate haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span><span class="ot"> empty ::</span> <span class="dt">PrefixMap</span> a
<span class="fu">&gt;</span> empty <span class="fu">=</span> (<span class="kw">Nothing</span>, <span class="dt">E</span>)
<span class="fu">&gt;</span> 
<span class="fu">&gt;</span><span class="ot"> node ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">PrefixMap</span> a
<span class="fu">&gt;</span> node b a <span class="fu">|</span> <span class="fu">null</span> b    <span class="fu">=</span> (<span class="kw">Just</span> a, <span class="dt">E</span>) 
<span class="fu">&gt;</span>          <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> (<span class="kw">Nothing</span>, <span class="dt">N</span> b <span class="dt">E</span>  (<span class="kw">Just</span> a)  <span class="dt">E</span> <span class="dt">E</span>)</code></pre>
<p>Now inserting elements it’s a bit tricky and may be simplified in the way of removing not needed insances</p>
<pre class="sourceCode literate haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span><span class="ot"> insert ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">PrefixMap</span> a <span class="ot">-&gt;</span> <span class="dt">PrefixMap</span> a
<span class="fu">&gt;</span> insert b a (v,n) <span class="fu">|</span> <span class="fu">null</span> b    <span class="fu">=</span> (<span class="kw">Just</span> a, n)
<span class="fu">&gt;</span>                  <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> (v, inner b a n)</code></pre>
<pre class="sourceCode literate haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span><span class="ot"> inner ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">PMap</span> a <span class="ot">-&gt;</span> <span class="dt">PMap</span> a
<span class="fu">&gt;</span> inner b a <span class="dt">E</span> <span class="fu">=</span> <span class="dt">N</span> b <span class="dt">E</span> (<span class="kw">Just</span> a) <span class="dt">E</span> <span class="dt">E</span>
<span class="fu">&gt;</span> inner b a n<span class="fu">@</span>(<span class="dt">N</span> b&#39; l v r e) <span class="fu">|</span> <span class="fu">null</span> b     <span class="fu">=</span> n
<span class="fu">&gt;</span>                            <span class="fu">|</span> <span class="fu">otherwise</span>  <span class="fu">=</span> 
<span class="fu">&gt;</span>   <span class="kw">case</span> comparing <span class="fu">head</span> b b&#39; <span class="kw">of</span>
<span class="fu">&gt;</span>     <span class="kw">LT</span> <span class="ot">-&gt;</span> <span class="dt">N</span> b&#39; (inner b a l) v r e   <span class="co">-- value less then current</span>
<span class="fu">&gt;</span>     <span class="kw">GT</span> <span class="ot">-&gt;</span> <span class="dt">N</span> b&#39; l v (inner b a r) e   <span class="co">-- value more then current</span>
<span class="fu">&gt;</span>     <span class="kw">EQ</span> <span class="ot">-&gt;</span> <span class="kw">let</span> x <span class="fu">=</span> commonPart b b&#39; <span class="co">-- value has common part</span>
<span class="fu">&gt;</span>               c <span class="fu">=</span> <span class="fu">take</span> x b
<span class="fu">&gt;</span>               c&#39;<span class="fu">=</span> <span class="fu">take</span> x b&#39;
<span class="fu">&gt;</span>               n&#39; <span class="fu">=</span> <span class="dt">N</span> (<span class="fu">drop</span> x b&#39;) <span class="dt">E</span> v <span class="dt">E</span> e
<span class="fu">&gt;</span>           <span class="kw">in</span> <span class="kw">if</span> on (<span class="fu">==</span>) <span class="fu">length</span> c b&#39;       <span class="co">-- b&#39; isPrefix of b</span>
<span class="fu">&gt;</span>                  <span class="kw">then</span> 
<span class="fu">&gt;</span>                   <span class="kw">if</span> on (<span class="fu">==</span>) <span class="fu">length</span> c b    <span class="co">-- b&#39; == b </span>
<span class="fu">&gt;</span>                       <span class="kw">then</span> <span class="dt">N</span> c l (<span class="kw">Just</span> <span class="fu">$!</span> a <span class="ot">`fq`</span> v) r e
<span class="fu">&gt;</span>                       <span class="kw">else</span> <span class="dt">N</span> c l v r (inner (<span class="fu">drop</span> x b) a e) <span class="co">-- [b &lt; b&#39;]</span>
<span class="fu">&gt;</span>                  <span class="kw">else</span> <span class="co">-- [ c &lt; b ]</span>
<span class="fu">&gt;</span>                   <span class="kw">if</span> on (<span class="fu">==</span>) <span class="fu">length</span> c b
<span class="fu">&gt;</span>                       <span class="kw">then</span> <span class="dt">N</span> c&#39; l (<span class="kw">Just</span> a) r n&#39;
<span class="fu">&gt;</span>                       <span class="kw">else</span> <span class="dt">N</span> c  l <span class="kw">Nothing</span>  r (inner (<span class="fu">drop</span> x b) a n&#39;)
<span class="fu">&gt;</span>   <span class="kw">where</span> 
<span class="fu">&gt;</span>     fq a _ <span class="fu">=</span> a</code></pre>
<p>lookup function</p>
<pre class="sourceCode literate haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span><span class="ot"> lookup ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">PrefixMap</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a
<span class="fu">&gt;</span> <span class="fu">lookup</span> b (v, n) <span class="fu">|</span> <span class="fu">null</span> b <span class="fu">=</span> v 
<span class="fu">&gt;</span>                 <span class="fu">|</span> <span class="fu">otherwise</span> <span class="fu">=</span> lookinner b n</code></pre>
<pre class="sourceCode literate haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span><span class="ot"> lookinner ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">PMap</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a
<span class="fu">&gt;</span> lookinner b <span class="dt">E</span> <span class="fu">=</span> <span class="kw">Nothing</span>
<span class="fu">&gt;</span> lookinner b (<span class="dt">N</span> b&#39; l v r e) <span class="fu">=</span>
<span class="fu">&gt;</span>   <span class="kw">case</span> comparing <span class="fu">head</span> b b&#39; <span class="kw">of</span>
<span class="fu">&gt;</span>     <span class="kw">LT</span> <span class="ot">-&gt;</span> lookinner b l
<span class="fu">&gt;</span>     <span class="kw">GT</span> <span class="ot">-&gt;</span> lookinner b r
<span class="fu">&gt;</span>     <span class="kw">EQ</span> <span class="ot">-&gt;</span> <span class="kw">let</span> x <span class="fu">=</span> commonPart b b&#39;
<span class="fu">&gt;</span>           <span class="kw">in</span> <span class="kw">if</span> x <span class="fu">==</span> <span class="fu">length</span> b&#39;
<span class="fu">&gt;</span>                 <span class="kw">then</span> <span class="kw">if</span> x <span class="fu">==</span> <span class="fu">length</span> b <span class="kw">then</span> v <span class="kw">else</span> lookinner (<span class="fu">drop</span> x b) e
<span class="fu">&gt;</span>                 <span class="kw">else</span> <span class="kw">Nothing</span></code></pre>
<pre class="sourceCode literate haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span><span class="ot"> commonPart ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
<span class="fu">&gt;</span> commonPart a b <span class="fu">=</span> go <span class="dv">0</span>
<span class="fu">&gt;</span>   <span class="kw">where</span> 
<span class="fu">&gt;</span><span class="ot">     go ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span>
<span class="fu">&gt;</span>     go x <span class="fu">|</span> x <span class="fu">==</span> y                <span class="fu">=</span> x
<span class="fu">&gt;</span>          <span class="fu">|</span> on (<span class="fu">==</span>) (findex x) a b <span class="fu">=</span> go (x<span class="dv">+1</span>)
<span class="fu">&gt;</span>          <span class="fu">|</span> <span class="fu">otherwise</span>             <span class="fu">=</span> x
<span class="fu">&gt;</span>     y <span class="fu">=</span> on <span class="fu">min</span> <span class="fu">length</span> a b
<span class="fu">&gt;</span>     findex <span class="fu">=</span> <span class="fu">flip</span> <span class="fu">index</span>
<span class="fu">&gt;</span>     <span class="ot">{-# INLINE findex #-}</span>
<span class="fu">&gt;</span> 
<span class="fu">&gt;</span> comparing <span class="fu">=</span> on <span class="fu">compare</span></code></pre>
<p>Check if we are right</p>
<pre class="sourceCode literate haskell"><code class="sourceCode haskell"><span class="fu">&gt;</span> prop_InsertList (<span class="ot">ls::</span>[<span class="dt">String</span>]) <span class="fu">=</span> 
<span class="fu">&gt;</span>   <span class="kw">let</span> x <span class="fu">=</span> Prelude.foldl (\o x <span class="ot">-&gt;</span> insert (<span class="fu">pack</span> x) (<span class="fu">pack</span> x) o) empty ls
<span class="fu">&gt;</span>   <span class="kw">in</span> Prelude.all (\l <span class="ot">-&gt;</span> (l<span class="fu">==</span><span class="st">&quot;&quot;</span>) <span class="fu">||</span> <span class="fu">pack</span> l <span class="ot">`lookup`</span> x <span class="fu">==</span> <span class="kw">Just</span> (<span class="fu">pack</span> l)) ls
<span class="fu">&gt;</span> 
<span class="fu">&gt;</span> main <span class="fu">=</span> quickCheck prop_InsertList</code></pre>
<p>What interesting is what properties to we have, ideally we can rewrite code thinking of a N c l v r e as a Tree (M v e)</p>
<p>Caveats:</p>
<ul>
<li><p>this tree is unbalanced so we don’t have best case: this can be fixed by rewriting structure as RB-tree so tree on each level will be sorted.</p></li>
<li><p>this tree doesn’t pack data as it possible: to pack data correctly one need to store a lenght of full bytestring in each node and replace element by the longer string, and copy bytestiring at the leaf node. It this variant we will smallest overhead.</p></li>
<li><p>Node can be rewritten as N (PMap a) (PMap a) (PrefixTree a) this will add a level of indirection but will simplify an insert and lookup a bit.</p></li>
</ul>]]></summary>
</entry>
<entry>
    <title>cabal-dev</title>
    <link href="http://qnikst.github.com/posts/2012-01-30-cabal-dev.html" />
    <id>http://qnikst.github.com/posts/2012-01-30-cabal-dev.html</id>
    <published>2010-01-30T00:00:00Z</published>
    <updated>2010-01-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<blockquote>
<p>Q: how to use cabal?</p>
<p>A: just cabal install cabal-dev</p>
</blockquote>
<p>Cabal is a great system of building and packaging Haskell libraries but is has some downsides such as:</p>
<ol style="list-style-type: decimal">
<li><p>it has very poor handling of library versions and tracking dependecies.</p></li>
<li><p>it can’t have multiply versions of same library (really it can but then it becomes a pain to use them)</p></li>
</ol>
<p>So sometimes it becomes a pain to fix haskell tree.</p>
<p>Cabal-dev is a cabal-install wrapper that build project and dependencies in sandboxed enviromnent, this allowes to use multiple version of the same library and so chanses to break system are very low. Additionally it generates image of installed application so you can check how it will be installed on your system without real installation.</p>
<p>Of cause as there are some problems:</p>
<ol style="list-style-type: decimal">
<li><p>cabal-dev is slow, because you should install all dependencies in sandbox environment (unless they are installed system wide).</p></li>
<li><p>cabal-dev can’t handle some Setup.hs options at least it was true in Dec-2011.</p></li>
</ol>
<p>First problem easily fixed in gentoo, one can install basic dependencies with emerge, so portage will track tree consitency with <code>haskell-updater &lt;http://www.haskell.org/haskellwiki/Gentoo#haskell-updater&gt;</code> (replacement tool for ghc-updater) and has all other features out of the box. So cabal-dev will be using most of libs from system and some other will be sandboxed.</p>
<p>For second one I had a workaround by creating makefile that run setup.hs and then cabal-dev intall.</p>
<p>Also cabal-dev has additional feature of running built program in ghc (i.e. run ghci and load every module in project) it can be done with</p>
<p><code>cabal-dev build &amp;&amp; cabal-dev ghci</code></p>]]></summary>
</entry>

</feed>
